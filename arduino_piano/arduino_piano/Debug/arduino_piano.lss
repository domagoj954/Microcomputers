
arduino_piano.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00001424  000014b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001424  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000cb  00800110  00800110  000014c8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000014c8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000014f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d8  00000000  00000000  00001538  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001f8f  00000000  00000000  00001710  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d51  00000000  00000000  0000369f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000133f  00000000  00000000  000043f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000580  00000000  00000000  00005730  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000adb  00000000  00000000  00005cb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001801  00000000  00000000  0000678b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d0  00000000  00000000  00007f8c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__ctors_end>
       4:	0c 94 97 03 	jmp	0x72e	; 0x72e <__vector_1>
       8:	0c 94 c5 03 	jmp	0x78a	; 0x78a <__vector_2>
       c:	0c 94 08 04 	jmp	0x810	; 0x810 <__vector_3>
      10:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      14:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      18:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      1c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      20:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      24:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      28:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      2c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      30:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      34:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      38:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      3c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      40:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      44:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      48:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      4c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      50:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      54:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      58:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      5c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      60:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      64:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	41 72       	andi	r20, 0x21	; 33
      6a:	64 75       	andi	r22, 0x54	; 84
      6c:	69 6e       	ori	r22, 0xE9	; 233
      6e:	6f 20       	and	r6, r15
      70:	70 69       	ori	r23, 0x90	; 144
      72:	61 6e       	ori	r22, 0xE1	; 225
      74:	6f 00       	.word	0x006f	; ????

00000076 <_ZZ4playfE3__c_6>:
      76:	43 35 00                                            C5.

00000079 <_ZZ4playfE3__c_5>:
      79:	42 34 00                                            B4.

0000007c <_ZZ4playfE3__c_4>:
      7c:	41 34 00                                            A4.

0000007f <_ZZ4playfE3__c_3>:
      7f:	47 34 00                                            G4.

00000082 <_ZZ4playfE3__c_2>:
      82:	46 34 00                                            F4.

00000085 <_ZZ4playfE3__c_1>:
      85:	45 34 00                                            E4.

00000088 <_ZZ4playfE3__c_0>:
      88:	44 34 00                                            D4.

0000008b <_ZZ4playfE3__c>:
      8b:	43 34 00                                            C4.

0000008e <_ZZ10__vector_3E3__c_0>:
      8e:	50 4f 54 52 45 42 41 4e 20 52 45 53 45 54 00        POTREBAN RESET.

0000009d <_ZZ10__vector_3E3__c>:
      9d:	47 4f 54 4f 56 4f 00                                GOTOVO.

000000a4 <_ZZ10__vector_2E3__c_0>:
      a4:	4e 41 53 54 41 56 49 54 45 00                       NASTAVITE.

000000ae <_ZZ10__vector_2E3__c>:
      ae:	50 52 45 4b 49 44 00                                PREKID.

000000b5 <_ZZ10__vector_1E3__c>:
      b5:	50 41 55 5a 41 00 00                                PAUZA..

000000bc <__ctors_end>:
      bc:	11 24       	eor	r1, r1
      be:	1f be       	out	0x3f, r1	; 63
      c0:	cf ef       	ldi	r28, 0xFF	; 255
      c2:	d8 e0       	ldi	r29, 0x08	; 8
      c4:	de bf       	out	0x3e, r29	; 62
      c6:	cd bf       	out	0x3d, r28	; 61

000000c8 <__do_copy_data>:
      c8:	11 e0       	ldi	r17, 0x01	; 1
      ca:	a0 e0       	ldi	r26, 0x00	; 0
      cc:	b1 e0       	ldi	r27, 0x01	; 1
      ce:	e4 e2       	ldi	r30, 0x24	; 36
      d0:	f4 e1       	ldi	r31, 0x14	; 20
      d2:	02 c0       	rjmp	.+4      	; 0xd8 <__do_copy_data+0x10>
      d4:	05 90       	lpm	r0, Z+
      d6:	0d 92       	st	X+, r0
      d8:	a0 31       	cpi	r26, 0x10	; 16
      da:	b1 07       	cpc	r27, r17
      dc:	d9 f7       	brne	.-10     	; 0xd4 <__do_copy_data+0xc>

000000de <__do_clear_bss>:
      de:	21 e0       	ldi	r18, 0x01	; 1
      e0:	a0 e1       	ldi	r26, 0x10	; 16
      e2:	b1 e0       	ldi	r27, 0x01	; 1
      e4:	01 c0       	rjmp	.+2      	; 0xe8 <.do_clear_bss_start>

000000e6 <.do_clear_bss_loop>:
      e6:	1d 92       	st	X+, r1

000000e8 <.do_clear_bss_start>:
      e8:	ab 3d       	cpi	r26, 0xDB	; 219
      ea:	b2 07       	cpc	r27, r18
      ec:	e1 f7       	brne	.-8      	; 0xe6 <.do_clear_bss_loop>
      ee:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <main>
      f2:	0c 94 10 0a 	jmp	0x1420	; 0x1420 <_exit>

000000f6 <__bad_interrupt>:
      f6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000fa <_Z8adc_initv>:

// inicijalizacija adc pretvorbe
void adc_init()
{
	// postavi referencu
	ADMUX &= ~ADC_REFERENCE_MASK;
      fa:	ec e7       	ldi	r30, 0x7C	; 124
      fc:	f0 e0       	ldi	r31, 0x00	; 0
      fe:	80 81       	ld	r24, Z
     100:	8f 73       	andi	r24, 0x3F	; 63
     102:	80 83       	st	Z, r24
	ADMUX |= ADC_REFERENCE;
     104:	80 81       	ld	r24, Z
     106:	80 64       	ori	r24, 0x40	; 64
     108:	80 83       	st	Z, r24
	
	// postavi djelitelj frekvencije
	ADCSRA &= ~ADC_PRESCALE_MASK;
     10a:	ea e7       	ldi	r30, 0x7A	; 122
     10c:	f0 e0       	ldi	r31, 0x00	; 0
     10e:	80 81       	ld	r24, Z
     110:	88 7f       	andi	r24, 0xF8	; 248
     112:	80 83       	st	Z, r24
	ADCSRA |=  ADC_PRESCALE;
     114:	80 81       	ld	r24, Z
     116:	87 60       	ori	r24, 0x07	; 7
     118:	80 83       	st	Z, r24
	
	// omoguci adc pretvorbu
	ADCSRA |= (1 << ADEN);
     11a:	80 81       	ld	r24, Z
     11c:	80 68       	ori	r24, 0x80	; 128
     11e:	80 83       	st	Z, r24
     120:	08 95       	ret

00000122 <_Z8adc_readh>:


uint16_t adc_read(uint8_t ch){
	
	// ako je ADC kanal ve?i od 7, tada se u ADCSRB mora postaviti bit MUX5
	if (ch & ADC_MUX_MASK1){
     122:	98 2f       	mov	r25, r24
     124:	9f 70       	andi	r25, 0x0F	; 15
     126:	31 f0       	breq	.+12     	; 0x134 <_Z8adc_readh+0x12>
		ADCSRB |= (1 << MUX0);
     128:	eb e7       	ldi	r30, 0x7B	; 123
     12a:	f0 e0       	ldi	r31, 0x00	; 0
     12c:	90 81       	ld	r25, Z
     12e:	91 60       	ori	r25, 0x01	; 1
     130:	90 83       	st	Z, r25
     132:	05 c0       	rjmp	.+10     	; 0x13e <_Z8adc_readh+0x1c>
	}else{
		ADCSRB &= ~(1 << MUX0);
     134:	eb e7       	ldi	r30, 0x7B	; 123
     136:	f0 e0       	ldi	r31, 0x00	; 0
     138:	90 81       	ld	r25, Z
     13a:	9e 7f       	andi	r25, 0xFE	; 254
     13c:	90 83       	st	Z, r25
	}
	
	// ako se koristi on-chip temperaturni senzor, tada se mijenja referenca na 2.56V
	if (ch == ADCTEMP){
     13e:	87 32       	cpi	r24, 0x27	; 39
     140:	41 f4       	brne	.+16     	; 0x152 <_Z8adc_readh+0x30>
		ADMUX &= ~ADC_REFERENCE_MASK;
     142:	ec e7       	ldi	r30, 0x7C	; 124
     144:	f0 e0       	ldi	r31, 0x00	; 0
     146:	90 81       	ld	r25, Z
     148:	9f 73       	andi	r25, 0x3F	; 63
     14a:	90 83       	st	Z, r25
		ADMUX |= ADC_REFERENCE_256V;
     14c:	90 81       	ld	r25, Z
     14e:	90 6c       	ori	r25, 0xC0	; 192
     150:	90 83       	st	Z, r25
	}
	
	ADMUX &= ~ADC_MUX_MASK1;
     152:	ec e7       	ldi	r30, 0x7C	; 124
     154:	f0 e0       	ldi	r31, 0x00	; 0
     156:	90 81       	ld	r25, Z
     158:	90 7f       	andi	r25, 0xF0	; 240
     15a:	90 83       	st	Z, r25
	ADMUX |= (ch & ADC_MUX_MASK1);
     15c:	90 81       	ld	r25, Z
     15e:	8f 70       	andi	r24, 0x0F	; 15
     160:	89 2b       	or	r24, r25
     162:	80 83       	st	Z, r24
	
	ADCSRA |= (1<<ADSC);
     164:	ea e7       	ldi	r30, 0x7A	; 122
     166:	f0 e0       	ldi	r31, 0x00	; 0
     168:	80 81       	ld	r24, Z
     16a:	80 64       	ori	r24, 0x40	; 64
     16c:	80 83       	st	Z, r24

	//Wait for conversion to complete
	while(!(ADCSRA & (1 << ADIF)));
     16e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     172:	84 ff       	sbrs	r24, 4
     174:	fc cf       	rjmp	.-8      	; 0x16e <_Z8adc_readh+0x4c>

	//Clear ADIF by writing one to it

	ADCSRA |= (1<<ADIF);
     176:	ea e7       	ldi	r30, 0x7A	; 122
     178:	f0 e0       	ldi	r31, 0x00	; 0
     17a:	80 81       	ld	r24, Z
     17c:	80 61       	ori	r24, 0x10	; 16
     17e:	80 83       	st	Z, r24
	
	// ako se koristi on-chip temperaturni senzor, tada se mijenja referenca na 2.56V
	// nakon izra?una ADC vrijednosti, referenca se vra?a na ADC_REFERENCE u adc.h
	
	
	return (ADC);  // read ADC (full 10 bits);
     180:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     184:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     188:	08 95       	ret

0000018a <_Z8i2c_initv>:
	TWCR = (1<<TWINT) | (1<<TWEN);
	while(!(TWCR & (1<<TWINT))){
		if((timeout++) > 1000) return 0;
	}
    return TWDR;
}
     18a:	88 b1       	in	r24, 0x08	; 8
     18c:	80 63       	ori	r24, 0x30	; 48
     18e:	88 b9       	out	0x08, r24	; 8
     190:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     194:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     198:	88 e4       	ldi	r24, 0x48	; 72
     19a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
     19e:	2f ef       	ldi	r18, 0xFF	; 255
     1a0:	80 e7       	ldi	r24, 0x70	; 112
     1a2:	92 e0       	ldi	r25, 0x02	; 2
     1a4:	21 50       	subi	r18, 0x01	; 1
     1a6:	80 40       	sbci	r24, 0x00	; 0
     1a8:	90 40       	sbci	r25, 0x00	; 0
     1aa:	e1 f7       	brne	.-8      	; 0x1a4 <_Z8i2c_initv+0x1a>
     1ac:	00 c0       	rjmp	.+0      	; 0x1ae <_Z8i2c_initv+0x24>
     1ae:	00 00       	nop
     1b0:	08 95       	ret

000001b2 <_Z9i2c_starth>:
     1b2:	94 ea       	ldi	r25, 0xA4	; 164
     1b4:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     1b8:	20 e0       	ldi	r18, 0x00	; 0
     1ba:	30 e0       	ldi	r19, 0x00	; 0
     1bc:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     1c0:	99 23       	and	r25, r25
     1c2:	44 f0       	brlt	.+16     	; 0x1d4 <_Z9i2c_starth+0x22>
     1c4:	a9 01       	movw	r20, r18
     1c6:	4f 5f       	subi	r20, 0xFF	; 255
     1c8:	5f 4f       	sbci	r21, 0xFF	; 255
     1ca:	29 3e       	cpi	r18, 0xE9	; 233
     1cc:	33 40       	sbci	r19, 0x03	; 3
     1ce:	b8 f4       	brcc	.+46     	; 0x1fe <_Z9i2c_starth+0x4c>
     1d0:	9a 01       	movw	r18, r20
     1d2:	f4 cf       	rjmp	.-24     	; 0x1bc <_Z9i2c_starth+0xa>
     1d4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     1d8:	84 e8       	ldi	r24, 0x84	; 132
     1da:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     1de:	80 e0       	ldi	r24, 0x00	; 0
     1e0:	90 e0       	ldi	r25, 0x00	; 0
     1e2:	01 c0       	rjmp	.+2      	; 0x1e6 <_Z9i2c_starth+0x34>
     1e4:	c9 01       	movw	r24, r18
     1e6:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     1ea:	22 23       	and	r18, r18
     1ec:	54 f0       	brlt	.+20     	; 0x202 <_Z9i2c_starth+0x50>
     1ee:	9c 01       	movw	r18, r24
     1f0:	2f 5f       	subi	r18, 0xFF	; 255
     1f2:	3f 4f       	sbci	r19, 0xFF	; 255
     1f4:	89 3e       	cpi	r24, 0xE9	; 233
     1f6:	93 40       	sbci	r25, 0x03	; 3
     1f8:	a8 f3       	brcs	.-22     	; 0x1e4 <_Z9i2c_starth+0x32>
     1fa:	81 e0       	ldi	r24, 0x01	; 1
     1fc:	08 95       	ret
     1fe:	81 e0       	ldi	r24, 0x01	; 1
     200:	08 95       	ret
     202:	80 e0       	ldi	r24, 0x00	; 0
     204:	08 95       	ret

00000206 <_Z8i2c_byteh>:
     206:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     20a:	84 e8       	ldi	r24, 0x84	; 132
     20c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     210:	80 e0       	ldi	r24, 0x00	; 0
     212:	90 e0       	ldi	r25, 0x00	; 0
     214:	01 c0       	rjmp	.+2      	; 0x218 <_Z8i2c_byteh+0x12>
     216:	c9 01       	movw	r24, r18
     218:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     21c:	22 23       	and	r18, r18
     21e:	44 f0       	brlt	.+16     	; 0x230 <_Z8i2c_byteh+0x2a>
     220:	9c 01       	movw	r18, r24
     222:	2f 5f       	subi	r18, 0xFF	; 255
     224:	3f 4f       	sbci	r19, 0xFF	; 255
     226:	89 3e       	cpi	r24, 0xE9	; 233
     228:	93 40       	sbci	r25, 0x03	; 3
     22a:	a8 f3       	brcs	.-22     	; 0x216 <_Z8i2c_byteh+0x10>
     22c:	81 e0       	ldi	r24, 0x01	; 1
     22e:	08 95       	ret
     230:	80 e0       	ldi	r24, 0x00	; 0
     232:	08 95       	ret

00000234 <_Z8i2c_stopv>:

//***************************************************************************************
void i2c_stop (void){
    TWCR = (1 << TWINT | 1 << TWSTO | 1 << TWEN);
     234:	ec eb       	ldi	r30, 0xBC	; 188
     236:	f0 e0       	ldi	r31, 0x00	; 0
     238:	84 e9       	ldi	r24, 0x94	; 148
     23a:	80 83       	st	Z, r24
	TWCR = 0;
     23c:	10 82       	st	Z, r1
     23e:	08 95       	ret

00000240 <_Z7lcd_outh>:

//***************************************************************************************
// LCD home
void lcd_home() {
	lcd_nibble_out(0x80, 0);
	char_counter = 0;
     240:	cf 93       	push	r28
     242:	c8 2f       	mov	r28, r24
     244:	8e e4       	ldi	r24, 0x4E	; 78
     246:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <_Z9i2c_starth>
     24a:	8c 2f       	mov	r24, r28
     24c:	88 60       	ori	r24, 0x08	; 8
     24e:	0e 94 03 01 	call	0x206	; 0x206 <_Z8i2c_byteh>
     252:	0e 94 1a 01 	call	0x234	; 0x234 <_Z8i2c_stopv>
     256:	cf 91       	pop	r28
     258:	08 95       	ret

0000025a <_Z14lcd_nibble_outhh>:
     25a:	1f 93       	push	r17
     25c:	cf 93       	push	r28
     25e:	df 93       	push	r29
     260:	c8 2f       	mov	r28, r24
     262:	61 11       	cpse	r22, r1
     264:	02 c0       	rjmp	.+4      	; 0x26a <_Z14lcd_nibble_outhh+0x10>
     266:	10 e0       	ldi	r17, 0x00	; 0
     268:	01 c0       	rjmp	.+2      	; 0x26c <_Z14lcd_nibble_outhh+0x12>
     26a:	11 e0       	ldi	r17, 0x01	; 1
     26c:	c4 fd       	sbrc	r28, 4
     26e:	02 c0       	rjmp	.+4      	; 0x274 <_Z14lcd_nibble_outhh+0x1a>
     270:	80 e0       	ldi	r24, 0x00	; 0
     272:	01 c0       	rjmp	.+2      	; 0x276 <_Z14lcd_nibble_outhh+0x1c>
     274:	80 e1       	ldi	r24, 0x10	; 16
     276:	c5 fd       	sbrc	r28, 5
     278:	80 62       	ori	r24, 0x20	; 32
     27a:	c6 fd       	sbrc	r28, 6
     27c:	80 64       	ori	r24, 0x40	; 64
     27e:	cc 23       	and	r28, r28
     280:	0c f4       	brge	.+2      	; 0x284 <_Z14lcd_nibble_outhh+0x2a>
     282:	80 68       	ori	r24, 0x80	; 128
     284:	d8 2f       	mov	r29, r24
     286:	d1 2b       	or	r29, r17
     288:	8d 2f       	mov	r24, r29
     28a:	84 60       	ori	r24, 0x04	; 4
     28c:	0e 94 20 01 	call	0x240	; 0x240 <_Z7lcd_outh>
     290:	8f e1       	ldi	r24, 0x1F	; 31
     292:	9e e4       	ldi	r25, 0x4E	; 78
     294:	01 97       	sbiw	r24, 0x01	; 1
     296:	f1 f7       	brne	.-4      	; 0x294 <_Z14lcd_nibble_outhh+0x3a>
     298:	00 c0       	rjmp	.+0      	; 0x29a <_Z14lcd_nibble_outhh+0x40>
     29a:	00 00       	nop
     29c:	8d 2f       	mov	r24, r29
     29e:	0e 94 20 01 	call	0x240	; 0x240 <_Z7lcd_outh>
     2a2:	c0 fd       	sbrc	r28, 0
     2a4:	02 c0       	rjmp	.+4      	; 0x2aa <_Z14lcd_nibble_outhh+0x50>
     2a6:	80 e0       	ldi	r24, 0x00	; 0
     2a8:	01 c0       	rjmp	.+2      	; 0x2ac <_Z14lcd_nibble_outhh+0x52>
     2aa:	80 e1       	ldi	r24, 0x10	; 16
     2ac:	c1 fd       	sbrc	r28, 1
     2ae:	80 62       	ori	r24, 0x20	; 32
     2b0:	c2 fd       	sbrc	r28, 2
     2b2:	80 64       	ori	r24, 0x40	; 64
     2b4:	c3 fd       	sbrc	r28, 3
     2b6:	80 68       	ori	r24, 0x80	; 128
     2b8:	c8 2f       	mov	r28, r24
     2ba:	c1 2b       	or	r28, r17
     2bc:	8c 2f       	mov	r24, r28
     2be:	84 60       	ori	r24, 0x04	; 4
     2c0:	0e 94 20 01 	call	0x240	; 0x240 <_Z7lcd_outh>
     2c4:	8f e1       	ldi	r24, 0x1F	; 31
     2c6:	9e e4       	ldi	r25, 0x4E	; 78
     2c8:	01 97       	sbiw	r24, 0x01	; 1
     2ca:	f1 f7       	brne	.-4      	; 0x2c8 <_Z14lcd_nibble_outhh+0x6e>
     2cc:	00 c0       	rjmp	.+0      	; 0x2ce <_Z14lcd_nibble_outhh+0x74>
     2ce:	00 00       	nop
     2d0:	8c 2f       	mov	r24, r28
     2d2:	0e 94 20 01 	call	0x240	; 0x240 <_Z7lcd_outh>
     2d6:	df 91       	pop	r29
     2d8:	cf 91       	pop	r28
     2da:	1f 91       	pop	r17
     2dc:	08 95       	ret

000002de <_Z9lcd_clearv>:
     2de:	60 e0       	ldi	r22, 0x00	; 0
     2e0:	81 e0       	ldi	r24, 0x01	; 1
     2e2:	0e 94 2d 01 	call	0x25a	; 0x25a <_Z14lcd_nibble_outhh>
     2e6:	60 e0       	ldi	r22, 0x00	; 0
     2e8:	80 e8       	ldi	r24, 0x80	; 128
     2ea:	0e 94 2d 01 	call	0x25a	; 0x25a <_Z14lcd_nibble_outhh>
     2ee:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <__data_end>
     2f2:	08 95       	ret

000002f4 <_Z8lcd_initv>:
}

//***************************************************************************************
// Init LCD
void lcd_init() {
     2f4:	cf 93       	push	r28
	unsigned char loop=3;
     2f6:	83 e0       	ldi	r24, 0x03	; 3

	while(loop--){
     2f8:	cf ef       	ldi	r28, 0xFF	; 255
     2fa:	c8 0f       	add	r28, r24
     2fc:	88 23       	and	r24, r24
     2fe:	b9 f0       	breq	.+46     	; 0x32e <_Z8lcd_initv+0x3a>
		lcd_out(LCD_D4 | LCD_D5 | LCD_E);
     300:	84 e3       	ldi	r24, 0x34	; 52
     302:	0e 94 20 01 	call	0x240	; 0x240 <_Z7lcd_outh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     306:	8f e3       	ldi	r24, 0x3F	; 63
     308:	9c e9       	ldi	r25, 0x9C	; 156
     30a:	01 97       	sbiw	r24, 0x01	; 1
     30c:	f1 f7       	brne	.-4      	; 0x30a <_Z8lcd_initv+0x16>
     30e:	00 c0       	rjmp	.+0      	; 0x310 <_Z8lcd_initv+0x1c>
     310:	00 00       	nop
		_delay_ms(10);
		lcd_out(LCD_D4 | LCD_D5);
     312:	80 e3       	ldi	r24, 0x30	; 48
     314:	0e 94 20 01 	call	0x240	; 0x240 <_Z7lcd_outh>
     318:	9f ef       	ldi	r25, 0xFF	; 255
     31a:	21 ee       	ldi	r18, 0xE1	; 225
     31c:	84 e0       	ldi	r24, 0x04	; 4
     31e:	91 50       	subi	r25, 0x01	; 1
     320:	20 40       	sbci	r18, 0x00	; 0
     322:	80 40       	sbci	r24, 0x00	; 0
     324:	e1 f7       	brne	.-8      	; 0x31e <_Z8lcd_initv+0x2a>
     326:	00 c0       	rjmp	.+0      	; 0x328 <_Z8lcd_initv+0x34>
     328:	00 00       	nop
//***************************************************************************************
// Init LCD
void lcd_init() {
	unsigned char loop=3;

	while(loop--){
     32a:	8c 2f       	mov	r24, r28
     32c:	e5 cf       	rjmp	.-54     	; 0x2f8 <_Z8lcd_initv+0x4>
		lcd_out(LCD_D4 | LCD_D5);
		_delay_ms(100);
	}

	// 4 bit mode
	lcd_out(LCD_D5 | LCD_E);
     32e:	84 e2       	ldi	r24, 0x24	; 36
     330:	0e 94 20 01 	call	0x240	; 0x240 <_Z7lcd_outh>
     334:	8f e3       	ldi	r24, 0x3F	; 63
     336:	9c e9       	ldi	r25, 0x9C	; 156
     338:	01 97       	sbiw	r24, 0x01	; 1
     33a:	f1 f7       	brne	.-4      	; 0x338 <_Z8lcd_initv+0x44>
     33c:	00 c0       	rjmp	.+0      	; 0x33e <_Z8lcd_initv+0x4a>
     33e:	00 00       	nop
	_delay_ms(10);
	lcd_out(LCD_D5);
     340:	80 e2       	ldi	r24, 0x20	; 32
     342:	0e 94 20 01 	call	0x240	; 0x240 <_Z7lcd_outh>
     346:	8f e3       	ldi	r24, 0x3F	; 63
     348:	9c e9       	ldi	r25, 0x9C	; 156
     34a:	01 97       	sbiw	r24, 0x01	; 1
     34c:	f1 f7       	brne	.-4      	; 0x34a <_Z8lcd_initv+0x56>
     34e:	00 c0       	rjmp	.+0      	; 0x350 <_Z8lcd_initv+0x5c>
     350:	00 00       	nop
	_delay_ms(10);

	lcd_nibble_out(0x28, 0);
     352:	60 e0       	ldi	r22, 0x00	; 0
     354:	88 e2       	ldi	r24, 0x28	; 40
     356:	0e 94 2d 01 	call	0x25a	; 0x25a <_Z14lcd_nibble_outhh>
	lcd_nibble_out(0x0C, 0);
     35a:	60 e0       	ldi	r22, 0x00	; 0
     35c:	8c e0       	ldi	r24, 0x0C	; 12
     35e:	0e 94 2d 01 	call	0x25a	; 0x25a <_Z14lcd_nibble_outhh>

	lcd_clear();
     362:	0e 94 6f 01 	call	0x2de	; 0x2de <_Z9lcd_clearv>
}
     366:	cf 91       	pop	r28
     368:	08 95       	ret

0000036a <_Z14lcd_write_charc>:

//***************************************************************************************
void lcd_write_char (char c) {
     36a:	cf 93       	push	r28
     36c:	c8 2f       	mov	r28, r24
	if(char_counter == LCD_WIDTH) lcd_nibble_out(LCD_ADDR_LINE2,0);
     36e:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
     372:	80 31       	cpi	r24, 0x10	; 16
     374:	21 f4       	brne	.+8      	; 0x37e <_Z14lcd_write_charc+0x14>
     376:	60 e0       	ldi	r22, 0x00	; 0
     378:	80 ec       	ldi	r24, 0xC0	; 192
     37a:	0e 94 2d 01 	call	0x25a	; 0x25a <_Z14lcd_nibble_outhh>
	if(char_counter == (LCD_WIDTH*2)){
     37e:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
     382:	80 32       	cpi	r24, 0x20	; 32
     384:	31 f4       	brne	.+12     	; 0x392 <_Z14lcd_write_charc+0x28>
		lcd_nibble_out(LCD_ADDR_LINE1,0);
     386:	60 e0       	ldi	r22, 0x00	; 0
     388:	80 e8       	ldi	r24, 0x80	; 128
     38a:	0e 94 2d 01 	call	0x25a	; 0x25a <_Z14lcd_nibble_outhh>
		char_counter = 0;
     38e:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <__data_end>
	}
	char_counter++;
     392:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
     396:	8f 5f       	subi	r24, 0xFF	; 255
     398:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
	lcd_nibble_out(c, 1);
     39c:	61 e0       	ldi	r22, 0x01	; 1
     39e:	8c 2f       	mov	r24, r28
     3a0:	0e 94 2d 01 	call	0x25a	; 0x25a <_Z14lcd_nibble_outhh>
}
     3a4:	cf 91       	pop	r28
     3a6:	08 95       	ret

000003a8 <_Z13lcd_print_strPc>:

//***************************************************************************************
void lcd_print_str(char *str) {
     3a8:	0f 93       	push	r16
     3aa:	1f 93       	push	r17
     3ac:	cf 93       	push	r28
     3ae:	df 93       	push	r29
     3b0:	ec 01       	movw	r28, r24
	while (*str != 0){
     3b2:	88 81       	ld	r24, Y
     3b4:	88 23       	and	r24, r24
     3b6:	01 f1       	breq	.+64     	; 0x3f8 <_Z13lcd_print_strPc+0x50>
		if(char_counter == LCD_WIDTH) lcd_nibble_out(LCD_ADDR_LINE2,0);
     3b8:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
     3bc:	80 31       	cpi	r24, 0x10	; 16
     3be:	21 f4       	brne	.+8      	; 0x3c8 <_Z13lcd_print_strPc+0x20>
     3c0:	60 e0       	ldi	r22, 0x00	; 0
     3c2:	80 ec       	ldi	r24, 0xC0	; 192
     3c4:	0e 94 2d 01 	call	0x25a	; 0x25a <_Z14lcd_nibble_outhh>
		if(char_counter == (LCD_WIDTH*2)){
     3c8:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
     3cc:	80 32       	cpi	r24, 0x20	; 32
     3ce:	31 f4       	brne	.+12     	; 0x3dc <_Z13lcd_print_strPc+0x34>
			lcd_nibble_out(LCD_ADDR_LINE1,0);
     3d0:	60 e0       	ldi	r22, 0x00	; 0
     3d2:	80 e8       	ldi	r24, 0x80	; 128
     3d4:	0e 94 2d 01 	call	0x25a	; 0x25a <_Z14lcd_nibble_outhh>
			char_counter = 0;
     3d8:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <__data_end>
		}
		char_counter++;
     3dc:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
     3e0:	8f 5f       	subi	r24, 0xFF	; 255
     3e2:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
		lcd_nibble_out(*str++, 1);
     3e6:	8e 01       	movw	r16, r28
     3e8:	0f 5f       	subi	r16, 0xFF	; 255
     3ea:	1f 4f       	sbci	r17, 0xFF	; 255
     3ec:	61 e0       	ldi	r22, 0x01	; 1
     3ee:	88 81       	ld	r24, Y
     3f0:	0e 94 2d 01 	call	0x25a	; 0x25a <_Z14lcd_nibble_outhh>
     3f4:	e8 01       	movw	r28, r16
	lcd_nibble_out(c, 1);
}

//***************************************************************************************
void lcd_print_str(char *str) {
	while (*str != 0){
     3f6:	dd cf       	rjmp	.-70     	; 0x3b2 <_Z13lcd_print_strPc+0xa>
			char_counter = 0;
		}
		char_counter++;
		lcd_nibble_out(*str++, 1);
	}
}
     3f8:	df 91       	pop	r29
     3fa:	cf 91       	pop	r28
     3fc:	1f 91       	pop	r17
     3fe:	0f 91       	pop	r16
     400:	08 95       	ret

00000402 <_Z11lcd_write_PPKcz>:

//***************************************************************************************
void lcd_write_P (const char *Buffer,...)
{
     402:	8f 92       	push	r8
     404:	9f 92       	push	r9
     406:	af 92       	push	r10
     408:	bf 92       	push	r11
     40a:	df 92       	push	r13
     40c:	ef 92       	push	r14
     40e:	ff 92       	push	r15
     410:	0f 93       	push	r16
     412:	1f 93       	push	r17
     414:	cf 93       	push	r28
     416:	df 93       	push	r29
     418:	cd b7       	in	r28, 0x3d	; 61
     41a:	de b7       	in	r29, 0x3e	; 62
     41c:	64 97       	sbiw	r28, 0x14	; 20
     41e:	0f b6       	in	r0, 0x3f	; 63
     420:	f8 94       	cli
     422:	de bf       	out	0x3e, r29	; 62
     424:	0f be       	out	0x3f, r0	; 63
     426:	cd bf       	out	0x3d, r28	; 61
     428:	fe 01       	movw	r30, r28
     42a:	b2 96       	adiw	r30, 0x22	; 34
     42c:	01 91       	ld	r16, Z+
     42e:	11 91       	ld	r17, Z+
	va_list ap;
	va_start (ap, Buffer);	
     430:	5f 01       	movw	r10, r30
	
	int format_flag;
	char str_buffer[10];
	char str_null_buffer[10];
	char move = 0;
     432:	d1 2c       	mov	r13, r1
     434:	01 c0       	rjmp	.+2      	; 0x438 <_Z11lcd_write_PPKcz+0x36>
                by = pgm_read_byte(Buffer++);
				}

			switch (by){
                case 's':
                    ptr = va_arg(ap,char *);
     436:	54 01       	movw	r10, r8
	char by;
	char *ptr;
		
	//Ausgabe der Zeichen
    for(;;){
		by = pgm_read_byte(Buffer++);
     438:	78 01       	movw	r14, r16
     43a:	8f ef       	ldi	r24, 0xFF	; 255
     43c:	e8 1a       	sub	r14, r24
     43e:	f8 0a       	sbc	r15, r24
     440:	f8 01       	movw	r30, r16
     442:	84 91       	lpm	r24, Z
		if(by==0) break; // end of format string
     444:	88 23       	and	r24, r24
     446:	09 f4       	brne	.+2      	; 0x44a <_Z11lcd_write_PPKcz+0x48>
     448:	aa c0       	rjmp	.+340    	; 0x59e <_Z11lcd_write_PPKcz+0x19c>
            
		if (by == '%'){
     44a:	85 32       	cpi	r24, 0x25	; 37
     44c:	09 f0       	breq	.+2      	; 0x450 <_Z11lcd_write_PPKcz+0x4e>
     44e:	a3 c0       	rjmp	.+326    	; 0x596 <_Z11lcd_write_PPKcz+0x194>
            by = pgm_read_byte(Buffer++);
     450:	48 01       	movw	r8, r16
     452:	f2 e0       	ldi	r31, 0x02	; 2
     454:	8f 0e       	add	r8, r31
     456:	91 1c       	adc	r9, r1
     458:	f7 01       	movw	r30, r14
     45a:	84 91       	lpm	r24, Z
			if (isdigit(by)>0){                   
     45c:	28 2f       	mov	r18, r24
     45e:	30 e0       	ldi	r19, 0x00	; 0
     460:	20 53       	subi	r18, 0x30	; 48
     462:	31 09       	sbc	r19, r1
     464:	2a 30       	cpi	r18, 0x0A	; 10
     466:	31 05       	cpc	r19, r1
     468:	10 f4       	brcc	.+4      	; 0x46e <_Z11lcd_write_PPKcz+0x6c>
     46a:	91 e0       	ldi	r25, 0x01	; 1
     46c:	01 c0       	rjmp	.+2      	; 0x470 <_Z11lcd_write_PPKcz+0x6e>
     46e:	90 e0       	ldi	r25, 0x00	; 0
     470:	99 23       	and	r25, r25
     472:	61 f0       	breq	.+24     	; 0x48c <_Z11lcd_write_PPKcz+0x8a>
 				str_null_buffer[0] = by;
     474:	8b 87       	std	Y+11, r24	; 0x0b
				str_null_buffer[1] = '\0';
     476:	1c 86       	std	Y+12, r1	; 0x0c
				move = atoi(str_null_buffer);
     478:	ce 01       	movw	r24, r28
     47a:	0b 96       	adiw	r24, 0x0b	; 11
     47c:	0e 94 98 09 	call	0x1330	; 0x1330 <atoi>
     480:	d8 2e       	mov	r13, r24
                by = pgm_read_byte(Buffer++);
     482:	0d 5f       	subi	r16, 0xFD	; 253
     484:	1f 4f       	sbci	r17, 0xFF	; 255
     486:	f4 01       	movw	r30, r8
     488:	84 91       	lpm	r24, Z
     48a:	01 c0       	rjmp	.+2      	; 0x48e <_Z11lcd_write_PPKcz+0x8c>
    for(;;){
		by = pgm_read_byte(Buffer++);
		if(by==0) break; // end of format string
            
		if (by == '%'){
            by = pgm_read_byte(Buffer++);
     48c:	84 01       	movw	r16, r8
				str_null_buffer[1] = '\0';
				move = atoi(str_null_buffer);
                by = pgm_read_byte(Buffer++);
				}

			switch (by){
     48e:	89 36       	cpi	r24, 0x69	; 105
     490:	81 f1       	breq	.+96     	; 0x4f2 <_Z11lcd_write_PPKcz+0xf0>
     492:	28 f4       	brcc	.+10     	; 0x49e <_Z11lcd_write_PPKcz+0x9c>
     494:	82 36       	cpi	r24, 0x62	; 98
     496:	59 f0       	breq	.+22     	; 0x4ae <_Z11lcd_write_PPKcz+0xac>
     498:	83 36       	cpi	r24, 0x63	; 99
     49a:	e9 f0       	breq	.+58     	; 0x4d6 <_Z11lcd_write_PPKcz+0xd4>
     49c:	cd cf       	rjmp	.-102    	; 0x438 <_Z11lcd_write_PPKcz+0x36>
     49e:	83 37       	cpi	r24, 0x73	; 115
     4a0:	41 f0       	breq	.+16     	; 0x4b2 <_Z11lcd_write_PPKcz+0xb0>
     4a2:	88 37       	cpi	r24, 0x78	; 120
     4a4:	21 f1       	breq	.+72     	; 0x4ee <_Z11lcd_write_PPKcz+0xec>
     4a6:	8f 36       	cpi	r24, 0x6F	; 111
     4a8:	09 f0       	breq	.+2      	; 0x4ac <_Z11lcd_write_PPKcz+0xaa>
     4aa:	c6 cf       	rjmp	.-116    	; 0x438 <_Z11lcd_write_PPKcz+0x36>
     4ac:	1e c0       	rjmp	.+60     	; 0x4ea <_Z11lcd_write_PPKcz+0xe8>
                case 's':
                    ptr = va_arg(ap,char *);
                    while(*ptr) { lcd_write_char(*ptr++); }
                    break;
				case 'b':
					Base = 2;
     4ae:	42 e0       	ldi	r20, 0x02	; 2
     4b0:	21 c0       	rjmp	.+66     	; 0x4f4 <_Z11lcd_write_PPKcz+0xf2>
                by = pgm_read_byte(Buffer++);
				}

			switch (by){
                case 's':
                    ptr = va_arg(ap,char *);
     4b2:	45 01       	movw	r8, r10
     4b4:	f2 e0       	ldi	r31, 0x02	; 2
     4b6:	8f 0e       	add	r8, r31
     4b8:	91 1c       	adc	r9, r1
     4ba:	f5 01       	movw	r30, r10
     4bc:	e0 80       	ld	r14, Z
     4be:	f1 80       	ldd	r15, Z+1	; 0x01
                    while(*ptr) { lcd_write_char(*ptr++); }
     4c0:	f7 01       	movw	r30, r14
     4c2:	80 81       	ld	r24, Z
     4c4:	88 23       	and	r24, r24
     4c6:	09 f4       	brne	.+2      	; 0x4ca <_Z11lcd_write_PPKcz+0xc8>
     4c8:	b6 cf       	rjmp	.-148    	; 0x436 <_Z11lcd_write_PPKcz+0x34>
     4ca:	ff ef       	ldi	r31, 0xFF	; 255
     4cc:	ef 1a       	sub	r14, r31
     4ce:	ff 0a       	sbc	r15, r31
     4d0:	0e 94 b5 01 	call	0x36a	; 0x36a <_Z14lcd_write_charc>
     4d4:	f5 cf       	rjmp	.-22     	; 0x4c0 <_Z11lcd_write_PPKcz+0xbe>
				case 'b':
					Base = 2;
					goto ConversionLoop;
				case 'c':
					//Int to char
					format_flag = va_arg(ap,int);
     4d6:	75 01       	movw	r14, r10
     4d8:	82 e0       	ldi	r24, 0x02	; 2
     4da:	e8 0e       	add	r14, r24
     4dc:	f1 1c       	adc	r15, r1
					lcd_write_char (format_flag++);
     4de:	f5 01       	movw	r30, r10
     4e0:	80 81       	ld	r24, Z
     4e2:	0e 94 b5 01 	call	0x36a	; 0x36a <_Z14lcd_write_charc>
				case 'b':
					Base = 2;
					goto ConversionLoop;
				case 'c':
					//Int to char
					format_flag = va_arg(ap,int);
     4e6:	57 01       	movw	r10, r14
					lcd_write_char (format_flag++);
					break;
     4e8:	a7 cf       	rjmp	.-178    	; 0x438 <_Z11lcd_write_PPKcz+0x36>
				case 'i':
					Base = 10;
					goto ConversionLoop;
				case 'o':
					Base = 8;
     4ea:	48 e0       	ldi	r20, 0x08	; 8
					goto ConversionLoop;
     4ec:	03 c0       	rjmp	.+6      	; 0x4f4 <_Z11lcd_write_PPKcz+0xf2>
				case 'x':
					Base = 16;
     4ee:	40 e1       	ldi	r20, 0x10	; 16
     4f0:	01 c0       	rjmp	.+2      	; 0x4f4 <_Z11lcd_write_PPKcz+0xf2>
					//Int to char
					format_flag = va_arg(ap,int);
					lcd_write_char (format_flag++);
					break;
				case 'i':
					Base = 10;
     4f2:	4a e0       	ldi	r20, 0x0A	; 10
				case 'x':
					Base = 16;
					//****************************
					ConversionLoop:
					//****************************
					itoa(va_arg(ap,int),str_buffer,Base);
     4f4:	50 e0       	ldi	r21, 0x00	; 0
     4f6:	75 01       	movw	r14, r10
     4f8:	f2 e0       	ldi	r31, 0x02	; 2
     4fa:	ef 0e       	add	r14, r31
     4fc:	f1 1c       	adc	r15, r1
extern __inline__ __ATTR_GNU_INLINE__
char *itoa (int __val, char *__s, int __radix)
{
    if (!__builtin_constant_p (__radix)) {
	extern char *__itoa (int, char *, int);
	return __itoa (__val, __s, __radix);
     4fe:	be 01       	movw	r22, r28
     500:	6f 5f       	subi	r22, 0xFF	; 255
     502:	7f 4f       	sbci	r23, 0xFF	; 255
     504:	f5 01       	movw	r30, r10
     506:	80 81       	ld	r24, Z
     508:	91 81       	ldd	r25, Z+1	; 0x01
     50a:	0e 94 c8 09 	call	0x1390	; 0x1390 <itoa>
					int b=0;
     50e:	80 e0       	ldi	r24, 0x00	; 0
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	01 c0       	rjmp	.+2      	; 0x516 <_Z11lcd_write_PPKcz+0x114>
					while (str_buffer[b++] != 0){};
     514:	ca 01       	movw	r24, r20
     516:	ac 01       	movw	r20, r24
     518:	4f 5f       	subi	r20, 0xFF	; 255
     51a:	5f 4f       	sbci	r21, 0xFF	; 255
     51c:	e1 e0       	ldi	r30, 0x01	; 1
     51e:	f0 e0       	ldi	r31, 0x00	; 0
     520:	ec 0f       	add	r30, r28
     522:	fd 1f       	adc	r31, r29
     524:	e8 0f       	add	r30, r24
     526:	f9 1f       	adc	r31, r25
     528:	20 81       	ld	r18, Z
     52a:	21 11       	cpse	r18, r1
     52c:	f3 cf       	rjmp	.-26     	; 0x514 <_Z11lcd_write_PPKcz+0x112>
					b--;
					if (b<move){
     52e:	2d 2d       	mov	r18, r13
     530:	30 e0       	ldi	r19, 0x00	; 0
     532:	82 17       	cp	r24, r18
     534:	93 07       	cpc	r25, r19
     536:	44 f5       	brge	.+80     	; 0x588 <_Z11lcd_write_PPKcz+0x186>
						move -=b;
     538:	d8 1a       	sub	r13, r24
						for (tmp = 0;tmp<move;tmp++){
     53a:	20 e0       	ldi	r18, 0x00	; 0
     53c:	30 e0       	ldi	r19, 0x00	; 0
     53e:	8d 2d       	mov	r24, r13
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	28 17       	cp	r18, r24
     544:	39 07       	cpc	r19, r25
     546:	5c f4       	brge	.+22     	; 0x55e <_Z11lcd_write_PPKcz+0x15c>
							str_null_buffer[tmp] = '0';
     548:	eb e0       	ldi	r30, 0x0B	; 11
     54a:	f0 e0       	ldi	r31, 0x00	; 0
     54c:	ec 0f       	add	r30, r28
     54e:	fd 1f       	adc	r31, r29
     550:	e2 0f       	add	r30, r18
     552:	f3 1f       	adc	r31, r19
     554:	80 e3       	ldi	r24, 0x30	; 48
     556:	80 83       	st	Z, r24
					int b=0;
					while (str_buffer[b++] != 0){};
					b--;
					if (b<move){
						move -=b;
						for (tmp = 0;tmp<move;tmp++){
     558:	2f 5f       	subi	r18, 0xFF	; 255
     55a:	3f 4f       	sbci	r19, 0xFF	; 255
     55c:	f0 cf       	rjmp	.-32     	; 0x53e <_Z11lcd_write_PPKcz+0x13c>
							str_null_buffer[tmp] = '0';
							}
						//tmp ++;
						str_null_buffer[tmp] = '\0';
     55e:	eb e0       	ldi	r30, 0x0B	; 11
     560:	f0 e0       	ldi	r31, 0x00	; 0
     562:	ec 0f       	add	r30, r28
     564:	fd 1f       	adc	r31, r29
     566:	e2 0f       	add	r30, r18
     568:	f3 1f       	adc	r31, r19
     56a:	10 82       	st	Z, r1
						strcat(str_null_buffer,str_buffer);
     56c:	be 01       	movw	r22, r28
     56e:	6f 5f       	subi	r22, 0xFF	; 255
     570:	7f 4f       	sbci	r23, 0xFF	; 255
     572:	ce 01       	movw	r24, r28
     574:	0b 96       	adiw	r24, 0x0b	; 11
     576:	0e 94 b6 09 	call	0x136c	; 0x136c <strcat>
						strcpy(str_buffer,str_null_buffer);
     57a:	be 01       	movw	r22, r28
     57c:	65 5f       	subi	r22, 0xF5	; 245
     57e:	7f 4f       	sbci	r23, 0xFF	; 255
     580:	ce 01       	movw	r24, r28
     582:	01 96       	adiw	r24, 0x01	; 1
     584:	0e 94 c1 09 	call	0x1382	; 0x1382 <strcpy>
						}
					lcd_print_str (str_buffer);
     588:	ce 01       	movw	r24, r28
     58a:	01 96       	adiw	r24, 0x01	; 1
     58c:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <_Z13lcd_print_strPc>
				case 'x':
					Base = 16;
					//****************************
					ConversionLoop:
					//****************************
					itoa(va_arg(ap,int),str_buffer,Base);
     590:	57 01       	movw	r10, r14
						str_null_buffer[tmp] = '\0';
						strcat(str_null_buffer,str_buffer);
						strcpy(str_buffer,str_null_buffer);
						}
					lcd_print_str (str_buffer);
					move =0;
     592:	d1 2c       	mov	r13, r1
					break;
     594:	51 cf       	rjmp	.-350    	; 0x438 <_Z11lcd_write_PPKcz+0x36>
				}
		}else{
			lcd_write_char (by);	
     596:	0e 94 b5 01 	call	0x36a	; 0x36a <_Z14lcd_write_charc>
	char by;
	char *ptr;
		
	//Ausgabe der Zeichen
    for(;;){
		by = pgm_read_byte(Buffer++);
     59a:	87 01       	movw	r16, r14
     59c:	4d cf       	rjmp	.-358    	; 0x438 <_Z11lcd_write_PPKcz+0x36>
		}else{
			lcd_write_char (by);	
		}
	}
	va_end(ap);
     59e:	64 96       	adiw	r28, 0x14	; 20
     5a0:	0f b6       	in	r0, 0x3f	; 63
     5a2:	f8 94       	cli
     5a4:	de bf       	out	0x3e, r29	; 62
     5a6:	0f be       	out	0x3f, r0	; 63
     5a8:	cd bf       	out	0x3d, r28	; 61
     5aa:	df 91       	pop	r29
     5ac:	cf 91       	pop	r28
     5ae:	1f 91       	pop	r17
     5b0:	0f 91       	pop	r16
     5b2:	ff 90       	pop	r15
     5b4:	ef 90       	pop	r14
     5b6:	df 90       	pop	r13
     5b8:	bf 90       	pop	r11
     5ba:	af 90       	pop	r10
     5bc:	9f 90       	pop	r9
     5be:	8f 90       	pop	r8
     5c0:	08 95       	ret

000005c2 <_Z4BUZZdi>:
#include "project.h"
#include <util/delay.h>


void BUZZ(double duration, int freq){
     5c2:	4f 92       	push	r4
     5c4:	5f 92       	push	r5
     5c6:	6f 92       	push	r6
     5c8:	7f 92       	push	r7
     5ca:	8f 92       	push	r8
     5cc:	9f 92       	push	r9
     5ce:	af 92       	push	r10
     5d0:	bf 92       	push	r11
     5d2:	cf 92       	push	r12
     5d4:	df 92       	push	r13
     5d6:	ef 92       	push	r14
     5d8:	ff 92       	push	r15
     5da:	0f 93       	push	r16
     5dc:	1f 93       	push	r17
     5de:	6b 01       	movw	r12, r22
     5e0:	7c 01       	movw	r14, r24
	long int i,cycles;
	cycles = duration * freq; // broj ciklusa izmjena pina za zujalicu
     5e2:	ba 01       	movw	r22, r20
     5e4:	55 0f       	add	r21, r21
     5e6:	88 0b       	sbc	r24, r24
     5e8:	99 0b       	sbc	r25, r25
     5ea:	0e 94 76 08 	call	0x10ec	; 0x10ec <__floatsisf>
     5ee:	4b 01       	movw	r8, r22
     5f0:	5c 01       	movw	r10, r24
     5f2:	a7 01       	movw	r20, r14
     5f4:	96 01       	movw	r18, r12
     5f6:	0e 94 2b 09 	call	0x1256	; 0x1256 <__mulsf3>
     5fa:	0e 94 3e 08 	call	0x107c	; 0x107c <__fixsfsi>
     5fe:	6b 01       	movw	r12, r22
     600:	7c 01       	movw	r14, r24
	long int period = 1.0/freq * 100000; // izracun poluperioda
     602:	a5 01       	movw	r20, r10
     604:	94 01       	movw	r18, r8
     606:	60 e0       	ldi	r22, 0x00	; 0
     608:	70 e0       	ldi	r23, 0x00	; 0
     60a:	80 e8       	ldi	r24, 0x80	; 128
     60c:	9f e3       	ldi	r25, 0x3F	; 63
     60e:	0e 94 cc 07 	call	0xf98	; 0xf98 <__divsf3>
     612:	20 e0       	ldi	r18, 0x00	; 0
     614:	30 e5       	ldi	r19, 0x50	; 80
     616:	43 ec       	ldi	r20, 0xC3	; 195
     618:	57 e4       	ldi	r21, 0x47	; 71
     61a:	0e 94 2b 09 	call	0x1256	; 0x1256 <__mulsf3>
     61e:	0e 94 3e 08 	call	0x107c	; 0x107c <__fixsfsi>
     622:	4b 01       	movw	r8, r22
     624:	5c 01       	movw	r10, r24
	long int half_period =  period / 2;
	BUZZER_DDR |= (1 << BUZZER_PIN);  // konfiguriranje izlaznog pina za zujalicu
     626:	84 b1       	in	r24, 0x04	; 4
     628:	81 60       	ori	r24, 0x01	; 1
     62a:	84 b9       	out	0x04, r24	; 4
	
	for (i=0; i < cycles; i++)   // mijenjaj stanje pina zujalice (cycles) puta
     62c:	00 e0       	ldi	r16, 0x00	; 0
     62e:	10 e0       	ldi	r17, 0x00	; 0
     630:	98 01       	movw	r18, r16
     632:	0c 15       	cp	r16, r12
     634:	1d 05       	cpc	r17, r13
     636:	2e 05       	cpc	r18, r14
     638:	3f 05       	cpc	r19, r15
     63a:	dc f5       	brge	.+118    	; 0x6b2 <_Z4BUZZdi+0xf0>
	{
		half_period = period/2;
     63c:	d5 01       	movw	r26, r10
     63e:	c4 01       	movw	r24, r8
     640:	bb 20       	and	r11, r11
     642:	1c f4       	brge	.+6      	; 0x64a <_Z4BUZZdi+0x88>
     644:	01 96       	adiw	r24, 0x01	; 1
     646:	a1 1d       	adc	r26, r1
     648:	b1 1d       	adc	r27, r1
     64a:	b5 95       	asr	r27
     64c:	a7 95       	ror	r26
     64e:	97 95       	ror	r25
     650:	87 95       	ror	r24
     652:	ac 01       	movw	r20, r24
     654:	bd 01       	movw	r22, r26
		while(half_period--) {
     656:	2a 01       	movw	r4, r20
     658:	3b 01       	movw	r6, r22
     65a:	e1 e0       	ldi	r30, 0x01	; 1
     65c:	4e 1a       	sub	r4, r30
     65e:	51 08       	sbc	r5, r1
     660:	61 08       	sbc	r6, r1
     662:	71 08       	sbc	r7, r1
     664:	45 2b       	or	r20, r21
     666:	46 2b       	or	r20, r22
     668:	47 2b       	or	r20, r23
     66a:	39 f0       	breq	.+14     	; 0x67a <_Z4BUZZdi+0xb8>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     66c:	45 e3       	ldi	r20, 0x35	; 53
     66e:	4a 95       	dec	r20
     670:	f1 f7       	brne	.-4      	; 0x66e <_Z4BUZZdi+0xac>
     672:	00 00       	nop
     674:	b3 01       	movw	r22, r6
     676:	a2 01       	movw	r20, r4
     678:	ee cf       	rjmp	.-36     	; 0x656 <_Z4BUZZdi+0x94>
			_delay_us(10);
		}
		
		BUZZER_PORT |= (1 << BUZZER_PIN);    // postavi pin zujalice
     67a:	45 b1       	in	r20, 0x05	; 5
     67c:	41 60       	ori	r20, 0x01	; 1
     67e:	45 b9       	out	0x05, r20	; 5
		
		half_period = period/2;
		while(half_period--) {
     680:	ac 01       	movw	r20, r24
     682:	bd 01       	movw	r22, r26
     684:	41 50       	subi	r20, 0x01	; 1
     686:	51 09       	sbc	r21, r1
     688:	61 09       	sbc	r22, r1
     68a:	71 09       	sbc	r23, r1
     68c:	89 2b       	or	r24, r25
     68e:	8a 2b       	or	r24, r26
     690:	8b 2b       	or	r24, r27
     692:	39 f0       	breq	.+14     	; 0x6a2 <_Z4BUZZdi+0xe0>
     694:	85 e3       	ldi	r24, 0x35	; 53
     696:	8a 95       	dec	r24
     698:	f1 f7       	brne	.-4      	; 0x696 <_Z4BUZZdi+0xd4>
     69a:	00 00       	nop
     69c:	db 01       	movw	r26, r22
     69e:	ca 01       	movw	r24, r20
     6a0:	ef cf       	rjmp	.-34     	; 0x680 <_Z4BUZZdi+0xbe>
			_delay_us(10);
		}                       // cekaj poluperiodu
		BUZZER_PORT &= ~(1 << BUZZER_PIN);   // resetiraj pin zujalice
     6a2:	85 b1       	in	r24, 0x05	; 5
     6a4:	8e 7f       	andi	r24, 0xFE	; 254
     6a6:	85 b9       	out	0x05, r24	; 5
	cycles = duration * freq; // broj ciklusa izmjena pina za zujalicu
	long int period = 1.0/freq * 100000; // izracun poluperioda
	long int half_period =  period / 2;
	BUZZER_DDR |= (1 << BUZZER_PIN);  // konfiguriranje izlaznog pina za zujalicu
	
	for (i=0; i < cycles; i++)   // mijenjaj stanje pina zujalice (cycles) puta
     6a8:	0f 5f       	subi	r16, 0xFF	; 255
     6aa:	1f 4f       	sbci	r17, 0xFF	; 255
     6ac:	2f 4f       	sbci	r18, 0xFF	; 255
     6ae:	3f 4f       	sbci	r19, 0xFF	; 255
     6b0:	c0 cf       	rjmp	.-128    	; 0x632 <_Z4BUZZdi+0x70>
			_delay_us(10);
		}                       // cekaj poluperiodu
		BUZZER_PORT &= ~(1 << BUZZER_PIN);   // resetiraj pin zujalice
	}
	
}
     6b2:	1f 91       	pop	r17
     6b4:	0f 91       	pop	r16
     6b6:	ff 90       	pop	r15
     6b8:	ef 90       	pop	r14
     6ba:	df 90       	pop	r13
     6bc:	cf 90       	pop	r12
     6be:	bf 90       	pop	r11
     6c0:	af 90       	pop	r10
     6c2:	9f 90       	pop	r9
     6c4:	8f 90       	pop	r8
     6c6:	7f 90       	pop	r7
     6c8:	6f 90       	pop	r6
     6ca:	5f 90       	pop	r5
     6cc:	4f 90       	pop	r4
     6ce:	08 95       	ret

000006d0 <_Z16interrupt_enablev>:
void pcint_pin_enable_all(){
	PCMSK0 = 0xFF;
}

void pcint_pin_disable_all(){
	PCMSK0 = 0x00;
     6d0:	78 94       	sei
     6d2:	08 95       	ret

000006d4 <_Z11int0_enablev>:
     6d4:	8d b3       	in	r24, 0x1d	; 29
     6d6:	81 60       	ori	r24, 0x01	; 1
     6d8:	8d bb       	out	0x1d, r24	; 29
     6da:	08 95       	ret

000006dc <_Z28int0_set_rising_falling_edgev>:
     6dc:	e9 e6       	ldi	r30, 0x69	; 105
     6de:	f0 e0       	ldi	r31, 0x00	; 0
     6e0:	80 81       	ld	r24, Z
     6e2:	8c 7f       	andi	r24, 0xFC	; 252
     6e4:	80 83       	st	Z, r24
     6e6:	80 81       	ld	r24, Z
     6e8:	81 60       	ori	r24, 0x01	; 1
     6ea:	80 83       	st	Z, r24
     6ec:	08 95       	ret

000006ee <_Z11int1_enablev>:
     6ee:	8d b3       	in	r24, 0x1d	; 29
     6f0:	82 60       	ori	r24, 0x02	; 2
     6f2:	8d bb       	out	0x1d, r24	; 29
     6f4:	08 95       	ret

000006f6 <_Z28int1_set_rising_falling_edgev>:
     6f6:	e9 e6       	ldi	r30, 0x69	; 105
     6f8:	f0 e0       	ldi	r31, 0x00	; 0
     6fa:	80 81       	ld	r24, Z
     6fc:	83 7f       	andi	r24, 0xF3	; 243
     6fe:	80 83       	st	Z, r24
     700:	80 81       	ld	r24, Z
     702:	84 60       	ori	r24, 0x04	; 4
     704:	80 83       	st	Z, r24
     706:	08 95       	ret

00000708 <_Z12pcint_enablev>:
     708:	e8 e6       	ldi	r30, 0x68	; 104
     70a:	f0 e0       	ldi	r31, 0x00	; 0
     70c:	80 81       	ld	r24, Z
     70e:	81 60       	ori	r24, 0x01	; 1
     710:	80 83       	st	Z, r24
     712:	08 95       	ret

00000714 <_Z16pcint_pin_enableh>:
     714:	eb e6       	ldi	r30, 0x6B	; 107
     716:	f0 e0       	ldi	r31, 0x00	; 0
     718:	90 81       	ld	r25, Z
     71a:	21 e0       	ldi	r18, 0x01	; 1
     71c:	30 e0       	ldi	r19, 0x00	; 0
     71e:	02 c0       	rjmp	.+4      	; 0x724 <_Z16pcint_pin_enableh+0x10>
     720:	22 0f       	add	r18, r18
     722:	33 1f       	adc	r19, r19
     724:	8a 95       	dec	r24
     726:	e2 f7       	brpl	.-8      	; 0x720 <_Z16pcint_pin_enableh+0xc>
     728:	29 2b       	or	r18, r25
     72a:	20 83       	st	Z, r18
     72c:	08 95       	ret

0000072e <__vector_1>:

int note[8] = {261, 293, 329, 349, 392, 440, 494, 523}; //frekvencija nota za buzzer (C4, D4, E4, F4, G4, A4, B4, C5)
int newNote[100] = {}; // novo polje u koje ce se spremati frekvencija nota u odredenom redoslijedu
int i; 

ISR(INT0_vect) { //prekidna rutina za vanjski prekid INT0
     72e:	1f 92       	push	r1
     730:	0f 92       	push	r0
     732:	0f b6       	in	r0, 0x3f	; 63
     734:	0f 92       	push	r0
     736:	11 24       	eor	r1, r1
     738:	2f 93       	push	r18
     73a:	3f 93       	push	r19
     73c:	4f 93       	push	r20
     73e:	5f 93       	push	r21
     740:	6f 93       	push	r22
     742:	7f 93       	push	r23
     744:	8f 93       	push	r24
     746:	9f 93       	push	r25
     748:	af 93       	push	r26
     74a:	bf 93       	push	r27
     74c:	ef 93       	push	r30
     74e:	ff 93       	push	r31
    if(get_pin(PIND, PD2) == 1) { //ako je pin PD2 u logi?koj jedinici
     750:	4a 9b       	sbis	0x09, 2	; 9
     752:	0a c0       	rjmp	.+20     	; 0x768 <__vector_1+0x3a>
        lcd_clear(); //ocisti LCD
     754:	0e 94 6f 01 	call	0x2de	; 0x2de <_Z9lcd_clearv>
        lcd_write("PAUZA"); //ispisi "PAUZA" na LCD-u
     758:	85 eb       	ldi	r24, 0xB5	; 181
     75a:	90 e0       	ldi	r25, 0x00	; 0
     75c:	9f 93       	push	r25
     75e:	8f 93       	push	r24
     760:	0e 94 01 02 	call	0x402	; 0x402 <_Z11lcd_write_PPKcz>
     764:	0f 90       	pop	r0
     766:	0f 90       	pop	r0
    }
}
     768:	ff 91       	pop	r31
     76a:	ef 91       	pop	r30
     76c:	bf 91       	pop	r27
     76e:	af 91       	pop	r26
     770:	9f 91       	pop	r25
     772:	8f 91       	pop	r24
     774:	7f 91       	pop	r23
     776:	6f 91       	pop	r22
     778:	5f 91       	pop	r21
     77a:	4f 91       	pop	r20
     77c:	3f 91       	pop	r19
     77e:	2f 91       	pop	r18
     780:	0f 90       	pop	r0
     782:	0f be       	out	0x3f, r0	; 63
     784:	0f 90       	pop	r0
     786:	1f 90       	pop	r1
     788:	18 95       	reti

0000078a <__vector_2>:

ISR(INT1_vect) { //prekidna rutina za vanjski prekid INT1
     78a:	1f 92       	push	r1
     78c:	0f 92       	push	r0
     78e:	0f b6       	in	r0, 0x3f	; 63
     790:	0f 92       	push	r0
     792:	11 24       	eor	r1, r1
     794:	2f 93       	push	r18
     796:	3f 93       	push	r19
     798:	4f 93       	push	r20
     79a:	5f 93       	push	r21
     79c:	6f 93       	push	r22
     79e:	7f 93       	push	r23
     7a0:	8f 93       	push	r24
     7a2:	9f 93       	push	r25
     7a4:	af 93       	push	r26
     7a6:	bf 93       	push	r27
     7a8:	ef 93       	push	r30
     7aa:	ff 93       	push	r31
   if(get_pin(PIND, PD3) == 1) { //ako je pin PD3 u logi?koj jedinici
     7ac:	4b 9b       	sbis	0x09, 3	; 9
     7ae:	13 c0       	rjmp	.+38     	; 0x7d6 <__vector_2+0x4c>
        lcd_clear(); //ocisti LCD
     7b0:	0e 94 6f 01 	call	0x2de	; 0x2de <_Z9lcd_clearv>
        lcd_write("PREKID"); //ispisi "PREKID" na LCD-u
     7b4:	8e ea       	ldi	r24, 0xAE	; 174
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	9f 93       	push	r25
     7ba:	8f 93       	push	r24
     7bc:	0e 94 01 02 	call	0x402	; 0x402 <_Z11lcd_write_PPKcz>
        PORTB |= (1 << PB4); //upali crvenu ledicu
     7c0:	85 b1       	in	r24, 0x05	; 5
     7c2:	80 61       	ori	r24, 0x10	; 16
     7c4:	85 b9       	out	0x05, r24	; 5
        PORTB &= ~ (1 << PB1); // ugasi zutu ledicu
     7c6:	85 b1       	in	r24, 0x05	; 5
     7c8:	8d 7f       	andi	r24, 0xFD	; 253
     7ca:	85 b9       	out	0x05, r24	; 5
        PORTB &= ~ (1 << PB2); //ugasi zelenu ledicu
     7cc:	85 b1       	in	r24, 0x05	; 5
     7ce:	8b 7f       	andi	r24, 0xFB	; 251
     7d0:	85 b9       	out	0x05, r24	; 5
     7d2:	0f 90       	pop	r0
     7d4:	0f 90       	pop	r0
    } 
    if(get_pin(PIND, PD3) == 0){  //ako je pin PD3 u logi?koj nuli
     7d6:	4b 99       	sbic	0x09, 3	; 9
     7d8:	0a c0       	rjmp	.+20     	; 0x7ee <__vector_2+0x64>
        lcd_clear(); //ocisti LCD
     7da:	0e 94 6f 01 	call	0x2de	; 0x2de <_Z9lcd_clearv>
        lcd_write("NASTAVITE"); //ispisi poruku
     7de:	84 ea       	ldi	r24, 0xA4	; 164
     7e0:	90 e0       	ldi	r25, 0x00	; 0
     7e2:	9f 93       	push	r25
     7e4:	8f 93       	push	r24
     7e6:	0e 94 01 02 	call	0x402	; 0x402 <_Z11lcd_write_PPKcz>
     7ea:	0f 90       	pop	r0
     7ec:	0f 90       	pop	r0
    }   
}
     7ee:	ff 91       	pop	r31
     7f0:	ef 91       	pop	r30
     7f2:	bf 91       	pop	r27
     7f4:	af 91       	pop	r26
     7f6:	9f 91       	pop	r25
     7f8:	8f 91       	pop	r24
     7fa:	7f 91       	pop	r23
     7fc:	6f 91       	pop	r22
     7fe:	5f 91       	pop	r21
     800:	4f 91       	pop	r20
     802:	3f 91       	pop	r19
     804:	2f 91       	pop	r18
     806:	0f 90       	pop	r0
     808:	0f be       	out	0x3f, r0	; 63
     80a:	0f 90       	pop	r0
     80c:	1f 90       	pop	r1
     80e:	18 95       	reti

00000810 <__vector_3>:

ISR (PCINT0_vect) {//prekidna rutina za vanjski prekid PCINT
     810:	1f 92       	push	r1
     812:	0f 92       	push	r0
     814:	0f b6       	in	r0, 0x3f	; 63
     816:	0f 92       	push	r0
     818:	11 24       	eor	r1, r1
     81a:	2f 93       	push	r18
     81c:	3f 93       	push	r19
     81e:	4f 93       	push	r20
     820:	5f 93       	push	r21
     822:	6f 93       	push	r22
     824:	7f 93       	push	r23
     826:	8f 93       	push	r24
     828:	9f 93       	push	r25
     82a:	af 93       	push	r26
     82c:	bf 93       	push	r27
     82e:	ef 93       	push	r30
     830:	ff 93       	push	r31
       lcd_clear(); //ocisti LCD
     832:	0e 94 6f 01 	call	0x2de	; 0x2de <_Z9lcd_clearv>
       lcd_write("GOTOVO"); //ispisi poruku
     836:	8d e9       	ldi	r24, 0x9D	; 157
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	9f 93       	push	r25
     83c:	8f 93       	push	r24
     83e:	0e 94 01 02 	call	0x402	; 0x402 <_Z11lcd_write_PPKcz>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     842:	2f ef       	ldi	r18, 0xFF	; 255
     844:	89 e6       	ldi	r24, 0x69	; 105
     846:	98 e1       	ldi	r25, 0x18	; 24
     848:	21 50       	subi	r18, 0x01	; 1
     84a:	80 40       	sbci	r24, 0x00	; 0
     84c:	90 40       	sbci	r25, 0x00	; 0
     84e:	e1 f7       	brne	.-8      	; 0x848 <__vector_3+0x38>
     850:	00 c0       	rjmp	.+0      	; 0x852 <__vector_3+0x42>
     852:	00 00       	nop
        _delay_ms(500);
       lcd_clear();
     854:	0e 94 6f 01 	call	0x2de	; 0x2de <_Z9lcd_clearv>
     858:	2f ef       	ldi	r18, 0xFF	; 255
     85a:	89 e6       	ldi	r24, 0x69	; 105
     85c:	98 e1       	ldi	r25, 0x18	; 24
     85e:	21 50       	subi	r18, 0x01	; 1
     860:	80 40       	sbci	r24, 0x00	; 0
     862:	90 40       	sbci	r25, 0x00	; 0
     864:	e1 f7       	brne	.-8      	; 0x85e <__vector_3+0x4e>
     866:	00 c0       	rjmp	.+0      	; 0x868 <__vector_3+0x58>
     868:	00 00       	nop
       _delay_ms(500);
      lcd_write("POTREBAN RESET"); //ispisi poruku
     86a:	8e e8       	ldi	r24, 0x8E	; 142
     86c:	90 e0       	ldi	r25, 0x00	; 0
     86e:	9f 93       	push	r25
     870:	8f 93       	push	r24
     872:	0e 94 01 02 	call	0x402	; 0x402 <_Z11lcd_write_PPKcz>
      PORTB |= (1 << PB5); //upali plavu ledicu
     876:	85 b1       	in	r24, 0x05	; 5
     878:	80 62       	ori	r24, 0x20	; 32
     87a:	85 b9       	out	0x05, r24	; 5
      PORTB &= ~ (1 << PB2); //ugasi zelenu ledicu
     87c:	85 b1       	in	r24, 0x05	; 5
     87e:	8b 7f       	andi	r24, 0xFB	; 251
     880:	85 b9       	out	0x05, r24	; 5
	  BUZZ(0,0);
     882:	40 e0       	ldi	r20, 0x00	; 0
     884:	50 e0       	ldi	r21, 0x00	; 0
     886:	60 e0       	ldi	r22, 0x00	; 0
     888:	70 e0       	ldi	r23, 0x00	; 0
     88a:	cb 01       	movw	r24, r22
     88c:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <_Z4BUZZdi>
}    
     890:	0f 90       	pop	r0
     892:	0f 90       	pop	r0
     894:	0f 90       	pop	r0
     896:	0f 90       	pop	r0
     898:	ff 91       	pop	r31
     89a:	ef 91       	pop	r30
     89c:	bf 91       	pop	r27
     89e:	af 91       	pop	r26
     8a0:	9f 91       	pop	r25
     8a2:	8f 91       	pop	r24
     8a4:	7f 91       	pop	r23
     8a6:	6f 91       	pop	r22
     8a8:	5f 91       	pop	r21
     8aa:	4f 91       	pop	r20
     8ac:	3f 91       	pop	r19
     8ae:	2f 91       	pop	r18
     8b0:	0f 90       	pop	r0
     8b2:	0f be       	out	0x3f, r0	; 63
     8b4:	0f 90       	pop	r0
     8b6:	1f 90       	pop	r1
     8b8:	18 95       	reti

000008ba <_Z4initv>:

void init(){
    
	//definiranje izlaznih pinova
	
	DDRB |= (1 << PB0); //buzzer
     8ba:	84 b1       	in	r24, 0x04	; 4
     8bc:	81 60       	ori	r24, 0x01	; 1
     8be:	84 b9       	out	0x04, r24	; 4
	DDRB |= (1 << PB1); //zuta ledica
     8c0:	84 b1       	in	r24, 0x04	; 4
     8c2:	82 60       	ori	r24, 0x02	; 2
     8c4:	84 b9       	out	0x04, r24	; 4
	DDRB |= (1 << PB2); //zelena ledica
     8c6:	84 b1       	in	r24, 0x04	; 4
     8c8:	84 60       	ori	r24, 0x04	; 4
     8ca:	84 b9       	out	0x04, r24	; 4
    DDRB |= (1 << PB4); //crvena ledica
     8cc:	84 b1       	in	r24, 0x04	; 4
     8ce:	80 61       	ori	r24, 0x10	; 16
     8d0:	84 b9       	out	0x04, r24	; 4
    DDRB |= (1 << PB5); //plava ledica
     8d2:	84 b1       	in	r24, 0x04	; 4
     8d4:	80 62       	ori	r24, 0x20	; 32
     8d6:	84 b9       	out	0x04, r24	; 4
    
	adc_init () ;  //inicijalizacija za adc 
     8d8:	0e 94 7d 00 	call	0xfa	; 0xfa <_Z8adc_initv>
    i2c_init();  // innicijalizacija za i2c
     8dc:	0e 94 c5 00 	call	0x18a	; 0x18a <_Z8i2c_initv>
    lcd_init(); // inicijalizacija za lcd
     8e0:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <_Z8lcd_initv>
    
    //inicijalizacija za I2C (PCF8574)
    i2c_start(0x40);
     8e4:	80 e4       	ldi	r24, 0x40	; 64
     8e6:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <_Z9i2c_starth>
    i2c_byte(0xF0);
     8ea:	80 ef       	ldi	r24, 0xF0	; 240
     8ec:	0e 94 03 01 	call	0x206	; 0x206 <_Z8i2c_byteh>
    i2c_stop();
     8f0:	0e 94 1a 01 	call	0x234	; 0x234 <_Z8i2c_stopv>
    
    int0_enable() ; //omoguci prekid  za INT0
     8f4:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <_Z11int0_enablev>
    int0_set_rising_falling_edge() ; //oba brida generiraju prekid INT0
     8f8:	0e 94 6e 03 	call	0x6dc	; 0x6dc <_Z28int0_set_rising_falling_edgev>

    int1_enable() ; //omoguci prekid za INT1
     8fc:	0e 94 77 03 	call	0x6ee	; 0x6ee <_Z11int1_enablev>
    int1_set_rising_falling_edge () ; //rastuci i padajuci brid generira prekid INT1
     900:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <_Z28int1_set_rising_falling_edgev>
	interrupt_enable(); //omoguci globalni prekid
     904:	0e 94 68 03 	call	0x6d0	; 0x6d0 <_Z16interrupt_enablev>
	
    // konfiguriranje ulaza PD0 i PD1
	DDRD &= ~((1 << PD0) | (1 << PD1));
     908:	8a b1       	in	r24, 0x0a	; 10
     90a:	8c 7f       	andi	r24, 0xFC	; 252
     90c:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1 << PD0) | (1 << PD1);
     90e:	8b b1       	in	r24, 0x0b	; 11
     910:	83 60       	ori	r24, 0x03	; 3
     912:	8b b9       	out	0x0b, r24	; 11
 
    pcint_enable(); //omoguci PCINT prekide
     914:	0e 94 84 03 	call	0x708	; 0x708 <_Z12pcint_enablev>
    pcint_pin_enable(PCINT3) ; //omoguci prekid na pinu PCINT3
     918:	83 e0       	ldi	r24, 0x03	; 3
     91a:	0e 94 8a 03 	call	0x714	; 0x714 <_Z16pcint_pin_enableh>
     91e:	08 95       	ret

00000920 <_Z4playf>:
}


void play(float U_ADC0){ //funkcija za sviranje satipkalima, argument funkcije je napon na pinu ADC0 (A0)
     920:	cf 92       	push	r12
     922:	df 92       	push	r13
     924:	ef 92       	push	r14
     926:	ff 92       	push	r15
     928:	cf 93       	push	r28
     92a:	df 93       	push	r29
	
             
           if(get_pin(PIND, PD3) == 0){ //ako je pin PD3 u logi?koj nuli
     92c:	4b 99       	sbic	0x09, 3	; 9
     92e:	39 c2       	rjmp	.+1138   	; 0xda2 <_Z4playf+0x482>
     930:	6b 01       	movw	r12, r22
     932:	7c 01       	movw	r14, r24
               PORTB &= ~ (1 << PB4); //ugasi crvenu ledicu
     934:	85 b1       	in	r24, 0x05	; 5
     936:	8f 7e       	andi	r24, 0xEF	; 239
     938:	85 b9       	out	0x05, r24	; 5

    
			if(U_ADC0 == 0){ //ako nije pritisnuto niti jedno tipkalo na kanalu A0, upaljena je zuta ledica
     93a:	20 e0       	ldi	r18, 0x00	; 0
     93c:	30 e0       	ldi	r19, 0x00	; 0
     93e:	a9 01       	movw	r20, r18
     940:	c7 01       	movw	r24, r14
     942:	b6 01       	movw	r22, r12
     944:	0e 94 c7 07 	call	0xf8e	; 0xf8e <__cmpsf2>
     948:	81 11       	cpse	r24, r1
     94a:	07 c0       	rjmp	.+14     	; 0x95a <_Z4playf+0x3a>
				PORTB |= (1 << PB1); //upali zutu ledicu
     94c:	85 b1       	in	r24, 0x05	; 5
     94e:	82 60       	ori	r24, 0x02	; 2
     950:	85 b9       	out	0x05, r24	; 5
				PORTB &= ~ (1 << PB2); //ugasi zelenu ledicu
     952:	85 b1       	in	r24, 0x05	; 5
     954:	8b 7f       	andi	r24, 0xFB	; 251
     956:	85 b9       	out	0x05, r24	; 5
     958:	0c c0       	rjmp	.+24     	; 0x972 <_Z4playf+0x52>

			}else{
                PORTB &= ~ (1 << PB1); //ugasi zutu ledicu
     95a:	85 b1       	in	r24, 0x05	; 5
     95c:	8d 7f       	andi	r24, 0xFD	; 253
     95e:	85 b9       	out	0x05, r24	; 5
     960:	8f e3       	ldi	r24, 0x3F	; 63
     962:	9c e9       	ldi	r25, 0x9C	; 156
     964:	01 97       	sbiw	r24, 0x01	; 1
     966:	f1 f7       	brne	.-4      	; 0x964 <_Z4playf+0x44>
     968:	00 c0       	rjmp	.+0      	; 0x96a <_Z4playf+0x4a>
     96a:	00 00       	nop
				_delay_ms (10); //delay od 10 ms
				PORTB |= (1 << PB2); //ako je pritisnuto bilo koje tipkalo na kanalu A0, upaljena je zelena ledica
     96c:	85 b1       	in	r24, 0x05	; 5
     96e:	84 60       	ori	r24, 0x04	; 4
     970:	85 b9       	out	0x05, r24	; 5
            }

			if(U_ADC0 < 5.00 && U_ADC0 >= 4.80) { // ako pritisnuto tipkalo odgovara ovom naponu
     972:	20 e0       	ldi	r18, 0x00	; 0
     974:	30 e0       	ldi	r19, 0x00	; 0
     976:	40 ea       	ldi	r20, 0xA0	; 160
     978:	50 e4       	ldi	r21, 0x40	; 64
     97a:	c7 01       	movw	r24, r14
     97c:	b6 01       	movw	r22, r12
     97e:	0e 94 c7 07 	call	0xf8e	; 0xf8e <__cmpsf2>
     982:	88 23       	and	r24, r24
     984:	cc f5       	brge	.+114    	; 0x9f8 <_Z4playf+0xd8>
     986:	2a e9       	ldi	r18, 0x9A	; 154
     988:	39 e9       	ldi	r19, 0x99	; 153
     98a:	49 e9       	ldi	r20, 0x99	; 153
     98c:	50 e4       	ldi	r21, 0x40	; 64
     98e:	c7 01       	movw	r24, r14
     990:	b6 01       	movw	r22, r12
     992:	0e 94 26 09 	call	0x124c	; 0x124c <__gesf2>
     996:	88 23       	and	r24, r24
     998:	7c f1       	brlt	.+94     	; 0x9f8 <_Z4playf+0xd8>
				BUZZ (0.1 , note[0]) ; _delay_ms (100) ;  //ukljuci buzzer
     99a:	c0 e0       	ldi	r28, 0x00	; 0
     99c:	d1 e0       	ldi	r29, 0x01	; 1
     99e:	48 81       	ld	r20, Y
     9a0:	59 81       	ldd	r21, Y+1	; 0x01
     9a2:	6d ec       	ldi	r22, 0xCD	; 205
     9a4:	7c ec       	ldi	r23, 0xCC	; 204
     9a6:	8c ec       	ldi	r24, 0xCC	; 204
     9a8:	9d e3       	ldi	r25, 0x3D	; 61
     9aa:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <_Z4BUZZdi>
     9ae:	9f ef       	ldi	r25, 0xFF	; 255
     9b0:	21 ee       	ldi	r18, 0xE1	; 225
     9b2:	84 e0       	ldi	r24, 0x04	; 4
     9b4:	91 50       	subi	r25, 0x01	; 1
     9b6:	20 40       	sbci	r18, 0x00	; 0
     9b8:	80 40       	sbci	r24, 0x00	; 0
     9ba:	e1 f7       	brne	.-8      	; 0x9b4 <_Z4playf+0x94>
     9bc:	00 c0       	rjmp	.+0      	; 0x9be <_Z4playf+0x9e>
     9be:	00 00       	nop
                lcd_clear(); // ocisti LCD display
     9c0:	0e 94 6f 01 	call	0x2de	; 0x2de <_Z9lcd_clearv>
                lcd_write("C4");  // ispisi na lcd koja nota odgovara pritisnutom tipkalu 
     9c4:	8b e8       	ldi	r24, 0x8B	; 139
     9c6:	90 e0       	ldi	r25, 0x00	; 0
     9c8:	9f 93       	push	r25
     9ca:	8f 93       	push	r24
     9cc:	0e 94 01 02 	call	0x402	; 0x402 <_Z11lcd_write_PPKcz>
                newNote[i] = note[0]; // spremi vrijednost note u novo polje
     9d0:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <i>
     9d4:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <i+0x1>
     9d8:	28 81       	ld	r18, Y
     9da:	39 81       	ldd	r19, Y+1	; 0x01
     9dc:	fc 01       	movw	r30, r24
     9de:	ee 0f       	add	r30, r30
     9e0:	ff 1f       	adc	r31, r31
     9e2:	ed 5e       	subi	r30, 0xED	; 237
     9e4:	fe 4f       	sbci	r31, 0xFE	; 254
     9e6:	31 83       	std	Z+1, r19	; 0x01
     9e8:	20 83       	st	Z, r18
                i++; // povecaj indeks polja za 1
     9ea:	01 96       	adiw	r24, 0x01	; 1
     9ec:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <i+0x1>
     9f0:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <i>
     9f4:	0f 90       	pop	r0
     9f6:	0f 90       	pop	r0
			}
            
            //isti slucaj za ostale kao i za prethodni
			
     	    if(U_ADC0 < 4.80 && U_ADC0 >= 4.75){  
     9f8:	2a e9       	ldi	r18, 0x9A	; 154
     9fa:	39 e9       	ldi	r19, 0x99	; 153
     9fc:	49 e9       	ldi	r20, 0x99	; 153
     9fe:	50 e4       	ldi	r21, 0x40	; 64
     a00:	c7 01       	movw	r24, r14
     a02:	b6 01       	movw	r22, r12
     a04:	0e 94 c7 07 	call	0xf8e	; 0xf8e <__cmpsf2>
     a08:	88 23       	and	r24, r24
     a0a:	cc f5       	brge	.+114    	; 0xa7e <_Z4playf+0x15e>
     a0c:	20 e0       	ldi	r18, 0x00	; 0
     a0e:	30 e0       	ldi	r19, 0x00	; 0
     a10:	48 e9       	ldi	r20, 0x98	; 152
     a12:	50 e4       	ldi	r21, 0x40	; 64
     a14:	c7 01       	movw	r24, r14
     a16:	b6 01       	movw	r22, r12
     a18:	0e 94 26 09 	call	0x124c	; 0x124c <__gesf2>
     a1c:	88 23       	and	r24, r24
     a1e:	7c f1       	brlt	.+94     	; 0xa7e <_Z4playf+0x15e>
				BUZZ (0.1 , note[1]) ; _delay_ms (100) ;
     a20:	c0 e0       	ldi	r28, 0x00	; 0
     a22:	d1 e0       	ldi	r29, 0x01	; 1
     a24:	4a 81       	ldd	r20, Y+2	; 0x02
     a26:	5b 81       	ldd	r21, Y+3	; 0x03
     a28:	6d ec       	ldi	r22, 0xCD	; 205
     a2a:	7c ec       	ldi	r23, 0xCC	; 204
     a2c:	8c ec       	ldi	r24, 0xCC	; 204
     a2e:	9d e3       	ldi	r25, 0x3D	; 61
     a30:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <_Z4BUZZdi>
     a34:	9f ef       	ldi	r25, 0xFF	; 255
     a36:	21 ee       	ldi	r18, 0xE1	; 225
     a38:	84 e0       	ldi	r24, 0x04	; 4
     a3a:	91 50       	subi	r25, 0x01	; 1
     a3c:	20 40       	sbci	r18, 0x00	; 0
     a3e:	80 40       	sbci	r24, 0x00	; 0
     a40:	e1 f7       	brne	.-8      	; 0xa3a <_Z4playf+0x11a>
     a42:	00 c0       	rjmp	.+0      	; 0xa44 <_Z4playf+0x124>
     a44:	00 00       	nop
                lcd_clear();
     a46:	0e 94 6f 01 	call	0x2de	; 0x2de <_Z9lcd_clearv>
                lcd_write("D4");
     a4a:	88 e8       	ldi	r24, 0x88	; 136
     a4c:	90 e0       	ldi	r25, 0x00	; 0
     a4e:	9f 93       	push	r25
     a50:	8f 93       	push	r24
     a52:	0e 94 01 02 	call	0x402	; 0x402 <_Z11lcd_write_PPKcz>
                newNote[i] = note[1];
     a56:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <i>
     a5a:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <i+0x1>
     a5e:	2a 81       	ldd	r18, Y+2	; 0x02
     a60:	3b 81       	ldd	r19, Y+3	; 0x03
     a62:	fc 01       	movw	r30, r24
     a64:	ee 0f       	add	r30, r30
     a66:	ff 1f       	adc	r31, r31
     a68:	ed 5e       	subi	r30, 0xED	; 237
     a6a:	fe 4f       	sbci	r31, 0xFE	; 254
     a6c:	31 83       	std	Z+1, r19	; 0x01
     a6e:	20 83       	st	Z, r18
                i++;
     a70:	01 96       	adiw	r24, 0x01	; 1
     a72:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <i+0x1>
     a76:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <i>
     a7a:	0f 90       	pop	r0
     a7c:	0f 90       	pop	r0
			}
			
		    if(U_ADC0 < 4.72 && U_ADC0 >= 4.65){
     a7e:	2d e3       	ldi	r18, 0x3D	; 61
     a80:	3a e0       	ldi	r19, 0x0A	; 10
     a82:	47 e9       	ldi	r20, 0x97	; 151
     a84:	50 e4       	ldi	r21, 0x40	; 64
     a86:	c7 01       	movw	r24, r14
     a88:	b6 01       	movw	r22, r12
     a8a:	0e 94 c7 07 	call	0xf8e	; 0xf8e <__cmpsf2>
     a8e:	88 23       	and	r24, r24
     a90:	cc f5       	brge	.+114    	; 0xb04 <_Z4playf+0x1e4>
     a92:	2d ec       	ldi	r18, 0xCD	; 205
     a94:	3c ec       	ldi	r19, 0xCC	; 204
     a96:	44 e9       	ldi	r20, 0x94	; 148
     a98:	50 e4       	ldi	r21, 0x40	; 64
     a9a:	c7 01       	movw	r24, r14
     a9c:	b6 01       	movw	r22, r12
     a9e:	0e 94 26 09 	call	0x124c	; 0x124c <__gesf2>
     aa2:	88 23       	and	r24, r24
     aa4:	7c f1       	brlt	.+94     	; 0xb04 <_Z4playf+0x1e4>
				BUZZ (0.1 , note[2]) ; _delay_ms (100) ;
     aa6:	c0 e0       	ldi	r28, 0x00	; 0
     aa8:	d1 e0       	ldi	r29, 0x01	; 1
     aaa:	4c 81       	ldd	r20, Y+4	; 0x04
     aac:	5d 81       	ldd	r21, Y+5	; 0x05
     aae:	6d ec       	ldi	r22, 0xCD	; 205
     ab0:	7c ec       	ldi	r23, 0xCC	; 204
     ab2:	8c ec       	ldi	r24, 0xCC	; 204
     ab4:	9d e3       	ldi	r25, 0x3D	; 61
     ab6:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <_Z4BUZZdi>
     aba:	9f ef       	ldi	r25, 0xFF	; 255
     abc:	21 ee       	ldi	r18, 0xE1	; 225
     abe:	84 e0       	ldi	r24, 0x04	; 4
     ac0:	91 50       	subi	r25, 0x01	; 1
     ac2:	20 40       	sbci	r18, 0x00	; 0
     ac4:	80 40       	sbci	r24, 0x00	; 0
     ac6:	e1 f7       	brne	.-8      	; 0xac0 <_Z4playf+0x1a0>
     ac8:	00 c0       	rjmp	.+0      	; 0xaca <_Z4playf+0x1aa>
     aca:	00 00       	nop
                lcd_clear();
     acc:	0e 94 6f 01 	call	0x2de	; 0x2de <_Z9lcd_clearv>
                lcd_write("E4");
     ad0:	85 e8       	ldi	r24, 0x85	; 133
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	9f 93       	push	r25
     ad6:	8f 93       	push	r24
     ad8:	0e 94 01 02 	call	0x402	; 0x402 <_Z11lcd_write_PPKcz>
                newNote[i] = note[2];
     adc:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <i>
     ae0:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <i+0x1>
     ae4:	2c 81       	ldd	r18, Y+4	; 0x04
     ae6:	3d 81       	ldd	r19, Y+5	; 0x05
     ae8:	fc 01       	movw	r30, r24
     aea:	ee 0f       	add	r30, r30
     aec:	ff 1f       	adc	r31, r31
     aee:	ed 5e       	subi	r30, 0xED	; 237
     af0:	fe 4f       	sbci	r31, 0xFE	; 254
     af2:	31 83       	std	Z+1, r19	; 0x01
     af4:	20 83       	st	Z, r18
                i++;
     af6:	01 96       	adiw	r24, 0x01	; 1
     af8:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <i+0x1>
     afc:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <i>
     b00:	0f 90       	pop	r0
     b02:	0f 90       	pop	r0
			}
			
		    if(U_ADC0 < 4.60 && U_ADC0 >= 4.50){
     b04:	23 e3       	ldi	r18, 0x33	; 51
     b06:	33 e3       	ldi	r19, 0x33	; 51
     b08:	43 e9       	ldi	r20, 0x93	; 147
     b0a:	50 e4       	ldi	r21, 0x40	; 64
     b0c:	c7 01       	movw	r24, r14
     b0e:	b6 01       	movw	r22, r12
     b10:	0e 94 c7 07 	call	0xf8e	; 0xf8e <__cmpsf2>
     b14:	88 23       	and	r24, r24
     b16:	cc f5       	brge	.+114    	; 0xb8a <_Z4playf+0x26a>
     b18:	20 e0       	ldi	r18, 0x00	; 0
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	40 e9       	ldi	r20, 0x90	; 144
     b1e:	50 e4       	ldi	r21, 0x40	; 64
     b20:	c7 01       	movw	r24, r14
     b22:	b6 01       	movw	r22, r12
     b24:	0e 94 26 09 	call	0x124c	; 0x124c <__gesf2>
     b28:	88 23       	and	r24, r24
     b2a:	7c f1       	brlt	.+94     	; 0xb8a <_Z4playf+0x26a>
				BUZZ (0.1 , note[3]) ; _delay_ms (100) ;
     b2c:	c0 e0       	ldi	r28, 0x00	; 0
     b2e:	d1 e0       	ldi	r29, 0x01	; 1
     b30:	4e 81       	ldd	r20, Y+6	; 0x06
     b32:	5f 81       	ldd	r21, Y+7	; 0x07
     b34:	6d ec       	ldi	r22, 0xCD	; 205
     b36:	7c ec       	ldi	r23, 0xCC	; 204
     b38:	8c ec       	ldi	r24, 0xCC	; 204
     b3a:	9d e3       	ldi	r25, 0x3D	; 61
     b3c:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <_Z4BUZZdi>
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	21 ee       	ldi	r18, 0xE1	; 225
     b44:	84 e0       	ldi	r24, 0x04	; 4
     b46:	91 50       	subi	r25, 0x01	; 1
     b48:	20 40       	sbci	r18, 0x00	; 0
     b4a:	80 40       	sbci	r24, 0x00	; 0
     b4c:	e1 f7       	brne	.-8      	; 0xb46 <_Z4playf+0x226>
     b4e:	00 c0       	rjmp	.+0      	; 0xb50 <_Z4playf+0x230>
     b50:	00 00       	nop
                lcd_clear();
     b52:	0e 94 6f 01 	call	0x2de	; 0x2de <_Z9lcd_clearv>
                lcd_write("F4");
     b56:	82 e8       	ldi	r24, 0x82	; 130
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	9f 93       	push	r25
     b5c:	8f 93       	push	r24
     b5e:	0e 94 01 02 	call	0x402	; 0x402 <_Z11lcd_write_PPKcz>
                newNote[i] = note[3];
     b62:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <i>
     b66:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <i+0x1>
     b6a:	2e 81       	ldd	r18, Y+6	; 0x06
     b6c:	3f 81       	ldd	r19, Y+7	; 0x07
     b6e:	fc 01       	movw	r30, r24
     b70:	ee 0f       	add	r30, r30
     b72:	ff 1f       	adc	r31, r31
     b74:	ed 5e       	subi	r30, 0xED	; 237
     b76:	fe 4f       	sbci	r31, 0xFE	; 254
     b78:	31 83       	std	Z+1, r19	; 0x01
     b7a:	20 83       	st	Z, r18
                i++;
     b7c:	01 96       	adiw	r24, 0x01	; 1
     b7e:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <i+0x1>
     b82:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <i>
     b86:	0f 90       	pop	r0
     b88:	0f 90       	pop	r0
			}
			
			if(U_ADC0 < 4.20 && U_ADC0 >= 4.05){
     b8a:	26 e6       	ldi	r18, 0x66	; 102
     b8c:	36 e6       	ldi	r19, 0x66	; 102
     b8e:	46 e8       	ldi	r20, 0x86	; 134
     b90:	50 e4       	ldi	r21, 0x40	; 64
     b92:	c7 01       	movw	r24, r14
     b94:	b6 01       	movw	r22, r12
     b96:	0e 94 c7 07 	call	0xf8e	; 0xf8e <__cmpsf2>
     b9a:	88 23       	and	r24, r24
     b9c:	cc f5       	brge	.+114    	; 0xc10 <_Z4playf+0x2f0>
     b9e:	2a e9       	ldi	r18, 0x9A	; 154
     ba0:	39 e9       	ldi	r19, 0x99	; 153
     ba2:	41 e8       	ldi	r20, 0x81	; 129
     ba4:	50 e4       	ldi	r21, 0x40	; 64
     ba6:	c7 01       	movw	r24, r14
     ba8:	b6 01       	movw	r22, r12
     baa:	0e 94 26 09 	call	0x124c	; 0x124c <__gesf2>
     bae:	88 23       	and	r24, r24
     bb0:	7c f1       	brlt	.+94     	; 0xc10 <_Z4playf+0x2f0>
				BUZZ (0.1 , note[4]) ; _delay_ms (100) ;
     bb2:	c0 e0       	ldi	r28, 0x00	; 0
     bb4:	d1 e0       	ldi	r29, 0x01	; 1
     bb6:	48 85       	ldd	r20, Y+8	; 0x08
     bb8:	59 85       	ldd	r21, Y+9	; 0x09
     bba:	6d ec       	ldi	r22, 0xCD	; 205
     bbc:	7c ec       	ldi	r23, 0xCC	; 204
     bbe:	8c ec       	ldi	r24, 0xCC	; 204
     bc0:	9d e3       	ldi	r25, 0x3D	; 61
     bc2:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <_Z4BUZZdi>
     bc6:	9f ef       	ldi	r25, 0xFF	; 255
     bc8:	21 ee       	ldi	r18, 0xE1	; 225
     bca:	84 e0       	ldi	r24, 0x04	; 4
     bcc:	91 50       	subi	r25, 0x01	; 1
     bce:	20 40       	sbci	r18, 0x00	; 0
     bd0:	80 40       	sbci	r24, 0x00	; 0
     bd2:	e1 f7       	brne	.-8      	; 0xbcc <_Z4playf+0x2ac>
     bd4:	00 c0       	rjmp	.+0      	; 0xbd6 <_Z4playf+0x2b6>
     bd6:	00 00       	nop
                lcd_clear();
     bd8:	0e 94 6f 01 	call	0x2de	; 0x2de <_Z9lcd_clearv>
                lcd_write("G4");
     bdc:	8f e7       	ldi	r24, 0x7F	; 127
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	9f 93       	push	r25
     be2:	8f 93       	push	r24
     be4:	0e 94 01 02 	call	0x402	; 0x402 <_Z11lcd_write_PPKcz>
                newNote[i] = note[4];
     be8:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <i>
     bec:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <i+0x1>
     bf0:	28 85       	ldd	r18, Y+8	; 0x08
     bf2:	39 85       	ldd	r19, Y+9	; 0x09
     bf4:	fc 01       	movw	r30, r24
     bf6:	ee 0f       	add	r30, r30
     bf8:	ff 1f       	adc	r31, r31
     bfa:	ed 5e       	subi	r30, 0xED	; 237
     bfc:	fe 4f       	sbci	r31, 0xFE	; 254
     bfe:	31 83       	std	Z+1, r19	; 0x01
     c00:	20 83       	st	Z, r18
                i++;
     c02:	01 96       	adiw	r24, 0x01	; 1
     c04:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <i+0x1>
     c08:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <i>
     c0c:	0f 90       	pop	r0
     c0e:	0f 90       	pop	r0
			}
			
			if(U_ADC0 < 3.80 && U_ADC0 >= 3.70){
     c10:	23 e3       	ldi	r18, 0x33	; 51
     c12:	33 e3       	ldi	r19, 0x33	; 51
     c14:	43 e7       	ldi	r20, 0x73	; 115
     c16:	50 e4       	ldi	r21, 0x40	; 64
     c18:	c7 01       	movw	r24, r14
     c1a:	b6 01       	movw	r22, r12
     c1c:	0e 94 c7 07 	call	0xf8e	; 0xf8e <__cmpsf2>
     c20:	88 23       	and	r24, r24
     c22:	cc f5       	brge	.+114    	; 0xc96 <_Z4playf+0x376>
     c24:	2d ec       	ldi	r18, 0xCD	; 205
     c26:	3c ec       	ldi	r19, 0xCC	; 204
     c28:	4c e6       	ldi	r20, 0x6C	; 108
     c2a:	50 e4       	ldi	r21, 0x40	; 64
     c2c:	c7 01       	movw	r24, r14
     c2e:	b6 01       	movw	r22, r12
     c30:	0e 94 26 09 	call	0x124c	; 0x124c <__gesf2>
     c34:	88 23       	and	r24, r24
     c36:	7c f1       	brlt	.+94     	; 0xc96 <_Z4playf+0x376>
				BUZZ (0.1 , note[5]) ; _delay_ms (100) ;
     c38:	c0 e0       	ldi	r28, 0x00	; 0
     c3a:	d1 e0       	ldi	r29, 0x01	; 1
     c3c:	4a 85       	ldd	r20, Y+10	; 0x0a
     c3e:	5b 85       	ldd	r21, Y+11	; 0x0b
     c40:	6d ec       	ldi	r22, 0xCD	; 205
     c42:	7c ec       	ldi	r23, 0xCC	; 204
     c44:	8c ec       	ldi	r24, 0xCC	; 204
     c46:	9d e3       	ldi	r25, 0x3D	; 61
     c48:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <_Z4BUZZdi>
     c4c:	9f ef       	ldi	r25, 0xFF	; 255
     c4e:	21 ee       	ldi	r18, 0xE1	; 225
     c50:	84 e0       	ldi	r24, 0x04	; 4
     c52:	91 50       	subi	r25, 0x01	; 1
     c54:	20 40       	sbci	r18, 0x00	; 0
     c56:	80 40       	sbci	r24, 0x00	; 0
     c58:	e1 f7       	brne	.-8      	; 0xc52 <_Z4playf+0x332>
     c5a:	00 c0       	rjmp	.+0      	; 0xc5c <_Z4playf+0x33c>
     c5c:	00 00       	nop
                lcd_clear();
     c5e:	0e 94 6f 01 	call	0x2de	; 0x2de <_Z9lcd_clearv>
                lcd_write("A4");
     c62:	8c e7       	ldi	r24, 0x7C	; 124
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	9f 93       	push	r25
     c68:	8f 93       	push	r24
     c6a:	0e 94 01 02 	call	0x402	; 0x402 <_Z11lcd_write_PPKcz>
                newNote[i] = note[5];
     c6e:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <i>
     c72:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <i+0x1>
     c76:	2a 85       	ldd	r18, Y+10	; 0x0a
     c78:	3b 85       	ldd	r19, Y+11	; 0x0b
     c7a:	fc 01       	movw	r30, r24
     c7c:	ee 0f       	add	r30, r30
     c7e:	ff 1f       	adc	r31, r31
     c80:	ed 5e       	subi	r30, 0xED	; 237
     c82:	fe 4f       	sbci	r31, 0xFE	; 254
     c84:	31 83       	std	Z+1, r19	; 0x01
     c86:	20 83       	st	Z, r18
                i++;
     c88:	01 96       	adiw	r24, 0x01	; 1
     c8a:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <i+0x1>
     c8e:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <i>
     c92:	0f 90       	pop	r0
     c94:	0f 90       	pop	r0
			}
			
			if(U_ADC0 < 3.55 && U_ADC0 >= 3.30){
     c96:	23 e3       	ldi	r18, 0x33	; 51
     c98:	33 e3       	ldi	r19, 0x33	; 51
     c9a:	43 e6       	ldi	r20, 0x63	; 99
     c9c:	50 e4       	ldi	r21, 0x40	; 64
     c9e:	c7 01       	movw	r24, r14
     ca0:	b6 01       	movw	r22, r12
     ca2:	0e 94 c7 07 	call	0xf8e	; 0xf8e <__cmpsf2>
     ca6:	88 23       	and	r24, r24
     ca8:	cc f5       	brge	.+114    	; 0xd1c <_Z4playf+0x3fc>
     caa:	23 e3       	ldi	r18, 0x33	; 51
     cac:	33 e3       	ldi	r19, 0x33	; 51
     cae:	43 e5       	ldi	r20, 0x53	; 83
     cb0:	50 e4       	ldi	r21, 0x40	; 64
     cb2:	c7 01       	movw	r24, r14
     cb4:	b6 01       	movw	r22, r12
     cb6:	0e 94 26 09 	call	0x124c	; 0x124c <__gesf2>
     cba:	88 23       	and	r24, r24
     cbc:	7c f1       	brlt	.+94     	; 0xd1c <_Z4playf+0x3fc>
				BUZZ (0.1 , note[6]) ; _delay_ms (100) ;
     cbe:	c0 e0       	ldi	r28, 0x00	; 0
     cc0:	d1 e0       	ldi	r29, 0x01	; 1
     cc2:	4c 85       	ldd	r20, Y+12	; 0x0c
     cc4:	5d 85       	ldd	r21, Y+13	; 0x0d
     cc6:	6d ec       	ldi	r22, 0xCD	; 205
     cc8:	7c ec       	ldi	r23, 0xCC	; 204
     cca:	8c ec       	ldi	r24, 0xCC	; 204
     ccc:	9d e3       	ldi	r25, 0x3D	; 61
     cce:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <_Z4BUZZdi>
     cd2:	9f ef       	ldi	r25, 0xFF	; 255
     cd4:	21 ee       	ldi	r18, 0xE1	; 225
     cd6:	84 e0       	ldi	r24, 0x04	; 4
     cd8:	91 50       	subi	r25, 0x01	; 1
     cda:	20 40       	sbci	r18, 0x00	; 0
     cdc:	80 40       	sbci	r24, 0x00	; 0
     cde:	e1 f7       	brne	.-8      	; 0xcd8 <_Z4playf+0x3b8>
     ce0:	00 c0       	rjmp	.+0      	; 0xce2 <_Z4playf+0x3c2>
     ce2:	00 00       	nop
                lcd_clear();
     ce4:	0e 94 6f 01 	call	0x2de	; 0x2de <_Z9lcd_clearv>
                lcd_write("B4");
     ce8:	89 e7       	ldi	r24, 0x79	; 121
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	9f 93       	push	r25
     cee:	8f 93       	push	r24
     cf0:	0e 94 01 02 	call	0x402	; 0x402 <_Z11lcd_write_PPKcz>
                newNote[i] = note[6];
     cf4:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <i>
     cf8:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <i+0x1>
     cfc:	2c 85       	ldd	r18, Y+12	; 0x0c
     cfe:	3d 85       	ldd	r19, Y+13	; 0x0d
     d00:	fc 01       	movw	r30, r24
     d02:	ee 0f       	add	r30, r30
     d04:	ff 1f       	adc	r31, r31
     d06:	ed 5e       	subi	r30, 0xED	; 237
     d08:	fe 4f       	sbci	r31, 0xFE	; 254
     d0a:	31 83       	std	Z+1, r19	; 0x01
     d0c:	20 83       	st	Z, r18
                i++;
     d0e:	01 96       	adiw	r24, 0x01	; 1
     d10:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <i+0x1>
     d14:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <i>
     d18:	0f 90       	pop	r0
     d1a:	0f 90       	pop	r0
			}
			
			if(U_ADC0 < 2.55 && U_ADC0 >= 2.45){
     d1c:	23 e3       	ldi	r18, 0x33	; 51
     d1e:	33 e3       	ldi	r19, 0x33	; 51
     d20:	43 e2       	ldi	r20, 0x23	; 35
     d22:	50 e4       	ldi	r21, 0x40	; 64
     d24:	c7 01       	movw	r24, r14
     d26:	b6 01       	movw	r22, r12
     d28:	0e 94 c7 07 	call	0xf8e	; 0xf8e <__cmpsf2>
     d2c:	88 23       	and	r24, r24
     d2e:	cc f5       	brge	.+114    	; 0xda2 <_Z4playf+0x482>
     d30:	2d ec       	ldi	r18, 0xCD	; 205
     d32:	3c ec       	ldi	r19, 0xCC	; 204
     d34:	4c e1       	ldi	r20, 0x1C	; 28
     d36:	50 e4       	ldi	r21, 0x40	; 64
     d38:	c7 01       	movw	r24, r14
     d3a:	b6 01       	movw	r22, r12
     d3c:	0e 94 26 09 	call	0x124c	; 0x124c <__gesf2>
     d40:	88 23       	and	r24, r24
     d42:	7c f1       	brlt	.+94     	; 0xda2 <_Z4playf+0x482>
				BUZZ (0.1 , note[7]) ; _delay_ms (100) ;
     d44:	c0 e0       	ldi	r28, 0x00	; 0
     d46:	d1 e0       	ldi	r29, 0x01	; 1
     d48:	4e 85       	ldd	r20, Y+14	; 0x0e
     d4a:	5f 85       	ldd	r21, Y+15	; 0x0f
     d4c:	6d ec       	ldi	r22, 0xCD	; 205
     d4e:	7c ec       	ldi	r23, 0xCC	; 204
     d50:	8c ec       	ldi	r24, 0xCC	; 204
     d52:	9d e3       	ldi	r25, 0x3D	; 61
     d54:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <_Z4BUZZdi>
     d58:	9f ef       	ldi	r25, 0xFF	; 255
     d5a:	21 ee       	ldi	r18, 0xE1	; 225
     d5c:	84 e0       	ldi	r24, 0x04	; 4
     d5e:	91 50       	subi	r25, 0x01	; 1
     d60:	20 40       	sbci	r18, 0x00	; 0
     d62:	80 40       	sbci	r24, 0x00	; 0
     d64:	e1 f7       	brne	.-8      	; 0xd5e <_Z4playf+0x43e>
     d66:	00 c0       	rjmp	.+0      	; 0xd68 <_Z4playf+0x448>
     d68:	00 00       	nop
                lcd_clear();
     d6a:	0e 94 6f 01 	call	0x2de	; 0x2de <_Z9lcd_clearv>
                lcd_write("C5");
     d6e:	86 e7       	ldi	r24, 0x76	; 118
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	9f 93       	push	r25
     d74:	8f 93       	push	r24
     d76:	0e 94 01 02 	call	0x402	; 0x402 <_Z11lcd_write_PPKcz>
                newNote[i] = note[7];
     d7a:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <i>
     d7e:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <i+0x1>
     d82:	2e 85       	ldd	r18, Y+14	; 0x0e
     d84:	3f 85       	ldd	r19, Y+15	; 0x0f
     d86:	fc 01       	movw	r30, r24
     d88:	ee 0f       	add	r30, r30
     d8a:	ff 1f       	adc	r31, r31
     d8c:	ed 5e       	subi	r30, 0xED	; 237
     d8e:	fe 4f       	sbci	r31, 0xFE	; 254
     d90:	31 83       	std	Z+1, r19	; 0x01
     d92:	20 83       	st	Z, r18
                i++;
     d94:	01 96       	adiw	r24, 0x01	; 1
     d96:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <i+0x1>
     d9a:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <i>
     d9e:	0f 90       	pop	r0
     da0:	0f 90       	pop	r0

         }		          
     }
}
     da2:	df 91       	pop	r29
     da4:	cf 91       	pop	r28
     da6:	ff 90       	pop	r15
     da8:	ef 90       	pop	r14
     daa:	df 90       	pop	r13
     dac:	cf 90       	pop	r12
     dae:	08 95       	ret

00000db0 <main>:

int main(void){ 
     db0:	cf 93       	push	r28
     db2:	df 93       	push	r29
     db4:	cd b7       	in	r28, 0x3d	; 61
     db6:	de b7       	in	r29, 0x3e	; 62
     db8:	28 97       	sbiw	r28, 0x08	; 8
     dba:	0f b6       	in	r0, 0x3f	; 63
     dbc:	f8 94       	cli
     dbe:	de bf       	out	0x3e, r29	; 62
     dc0:	0f be       	out	0x3f, r0	; 63
     dc2:	cd bf       	out	0x3d, r28	; 61
    
	init(); //inicijalizacija 
     dc4:	0e 94 5d 04 	call	0x8ba	; 0x8ba <_Z4initv>
 
    lcd_clear(); //ocisti LCD
     dc8:	0e 94 6f 01 	call	0x2de	; 0x2de <_Z9lcd_clearv>
    lcd_write("Arduino piano"); //ispisi poruku na LCD-u
     dcc:	88 e6       	ldi	r24, 0x68	; 104
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	9f 93       	push	r25
     dd2:	8f 93       	push	r24
     dd4:	0e 94 01 02 	call	0x402	; 0x402 <_Z11lcd_write_PPKcz>


	uint16_t ADC_0 ; // analogni pin A0
	float U_ADC0 ; // napon na pinu ADC0 (A0)
	const float V_REF = 5.0; // AVCC je referentni napon
	float y[2] = {0 , 0}; // {y[k-1] , y[k]}
     dd8:	19 82       	std	Y+1, r1	; 0x01
     dda:	1a 82       	std	Y+2, r1	; 0x02
     ddc:	1b 82       	std	Y+3, r1	; 0x03
     dde:	1c 82       	std	Y+4, r1	; 0x04
     de0:	0f 90       	pop	r0
     de2:	0f 90       	pop	r0
    
    unsigned int arrSize = sizeof(newNote)/sizeof(newNote[0]); //duljina novog polja 

	while(1){

        ADC_0 = adc_read(ADC0); // u ADC_0 spremljene vrijednosti analogno-digitalne pretvorbe sa kanala ADC0
     de4:	80 e0       	ldi	r24, 0x00	; 0
     de6:	0e 94 91 00 	call	0x122	; 0x122 <_Z8adc_readh>
     dea:	8c 01       	movw	r16, r24
        y[k] = 0.0 * y[k - 1] + 1.0 * ADC_0 ; //digitalni filter, potrebene izmjene
     dec:	69 81       	ldd	r22, Y+1	; 0x01
     dee:	7a 81       	ldd	r23, Y+2	; 0x02
     df0:	8b 81       	ldd	r24, Y+3	; 0x03
     df2:	9c 81       	ldd	r25, Y+4	; 0x04
     df4:	20 e0       	ldi	r18, 0x00	; 0
     df6:	30 e0       	ldi	r19, 0x00	; 0
     df8:	a9 01       	movw	r20, r18
     dfa:	0e 94 2b 09 	call	0x1256	; 0x1256 <__mulsf3>
     dfe:	6b 01       	movw	r12, r22
     e00:	7c 01       	movw	r14, r24
     e02:	b8 01       	movw	r22, r16
     e04:	80 e0       	ldi	r24, 0x00	; 0
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	0e 94 74 08 	call	0x10e8	; 0x10e8 <__floatunsisf>
     e0c:	9b 01       	movw	r18, r22
     e0e:	ac 01       	movw	r20, r24
     e10:	c7 01       	movw	r24, r14
     e12:	b6 01       	movw	r22, r12
     e14:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <__addsf3>
     e18:	6b 01       	movw	r12, r22
     e1a:	7c 01       	movw	r14, r24
        U_ADC0 = y[k] * V_REF / 1023.0; //racunanje vrijednosti napona
     e1c:	20 e0       	ldi	r18, 0x00	; 0
     e1e:	30 e0       	ldi	r19, 0x00	; 0
     e20:	40 ea       	ldi	r20, 0xA0	; 160
     e22:	50 e4       	ldi	r21, 0x40	; 64
     e24:	0e 94 2b 09 	call	0x1256	; 0x1256 <__mulsf3>
     e28:	20 e0       	ldi	r18, 0x00	; 0
     e2a:	30 ec       	ldi	r19, 0xC0	; 192
     e2c:	4f e7       	ldi	r20, 0x7F	; 127
     e2e:	54 e4       	ldi	r21, 0x44	; 68
     e30:	0e 94 cc 07 	call	0xf98	; 0xf98 <__divsf3>
     e34:	4b 01       	movw	r8, r22
     e36:	5c 01       	movw	r10, r24
        y[k-1] = y[k]; // prethodno mjerenje sada je trenutno
     e38:	c9 82       	std	Y+1, r12	; 0x01
     e3a:	da 82       	std	Y+2, r13	; 0x02
     e3c:	eb 82       	std	Y+3, r14	; 0x03
     e3e:	fc 82       	std	Y+4, r15	; 0x04
        
       	play(U_ADC0); //funkcija za sviranje
     e40:	0e 94 90 04 	call	0x920	; 0x920 <_Z4playf>
          
        if(get_pin(PIND, PD3) == 0){//ako je pin PD3 u logi?koj nuli
     e44:	4b 99       	sbic	0x09, 3	; 9
     e46:	ce cf       	rjmp	.-100    	; 0xde4 <main+0x34>
            if(U_ADC0 < 1.7 && U_ADC0 >= 1.4){ //ako je pritisnuto tipkalo 9
     e48:	2a e9       	ldi	r18, 0x9A	; 154
     e4a:	39 e9       	ldi	r19, 0x99	; 153
     e4c:	49 ed       	ldi	r20, 0xD9	; 217
     e4e:	5f e3       	ldi	r21, 0x3F	; 63
     e50:	c5 01       	movw	r24, r10
     e52:	b4 01       	movw	r22, r8
     e54:	0e 94 c7 07 	call	0xf8e	; 0xf8e <__cmpsf2>
     e58:	88 23       	and	r24, r24
     e5a:	24 f6       	brge	.-120    	; 0xde4 <main+0x34>
     e5c:	23 e3       	ldi	r18, 0x33	; 51
     e5e:	33 e3       	ldi	r19, 0x33	; 51
     e60:	43 eb       	ldi	r20, 0xB3	; 179
     e62:	5f e3       	ldi	r21, 0x3F	; 63
     e64:	c5 01       	movw	r24, r10
     e66:	b4 01       	movw	r22, r8
     e68:	0e 94 26 09 	call	0x124c	; 0x124c <__gesf2>
     e6c:	88 23       	and	r24, r24
     e6e:	0c f4       	brge	.+2      	; 0xe72 <main+0xc2>
     e70:	b9 cf       	rjmp	.-142    	; 0xde4 <main+0x34>
                lcd_clear();//ocisti LCD
     e72:	0e 94 6f 01 	call	0x2de	; 0x2de <_Z9lcd_clearv>
                for(unsigned int i = 0; i < arrSize; i++){ //za raspon velicine novog polja
     e76:	00 e0       	ldi	r16, 0x00	; 0
     e78:	10 e0       	ldi	r17, 0x00	; 0
     e7a:	04 36       	cpi	r16, 0x64	; 100
     e7c:	11 05       	cpc	r17, r1
     e7e:	08 f0       	brcs	.+2      	; 0xe82 <main+0xd2>
     e80:	b1 cf       	rjmp	.-158    	; 0xde4 <main+0x34>
                BUZZ (0.1 , newNote[i]) ; _delay_ms (200) ; //ukljuci buzzer                  
     e82:	f8 01       	movw	r30, r16
     e84:	ee 0f       	add	r30, r30
     e86:	ff 1f       	adc	r31, r31
     e88:	ed 5e       	subi	r30, 0xED	; 237
     e8a:	fe 4f       	sbci	r31, 0xFE	; 254
     e8c:	40 81       	ld	r20, Z
     e8e:	51 81       	ldd	r21, Z+1	; 0x01
     e90:	6d ec       	ldi	r22, 0xCD	; 205
     e92:	7c ec       	ldi	r23, 0xCC	; 204
     e94:	8c ec       	ldi	r24, 0xCC	; 204
     e96:	9d e3       	ldi	r25, 0x3D	; 61
     e98:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <_Z4BUZZdi>
     e9c:	2f ef       	ldi	r18, 0xFF	; 255
     e9e:	83 ec       	ldi	r24, 0xC3	; 195
     ea0:	99 e0       	ldi	r25, 0x09	; 9
     ea2:	21 50       	subi	r18, 0x01	; 1
     ea4:	80 40       	sbci	r24, 0x00	; 0
     ea6:	90 40       	sbci	r25, 0x00	; 0
     ea8:	e1 f7       	brne	.-8      	; 0xea2 <main+0xf2>
     eaa:	00 c0       	rjmp	.+0      	; 0xeac <main+0xfc>
     eac:	00 00       	nop
       	play(U_ADC0); //funkcija za sviranje
          
        if(get_pin(PIND, PD3) == 0){//ako je pin PD3 u logi?koj nuli
            if(U_ADC0 < 1.7 && U_ADC0 >= 1.4){ //ako je pritisnuto tipkalo 9
                lcd_clear();//ocisti LCD
                for(unsigned int i = 0; i < arrSize; i++){ //za raspon velicine novog polja
     eae:	0f 5f       	subi	r16, 0xFF	; 255
     eb0:	1f 4f       	sbci	r17, 0xFF	; 255
     eb2:	e3 cf       	rjmp	.-58     	; 0xe7a <main+0xca>

00000eb4 <__subsf3>:
     eb4:	50 58       	subi	r21, 0x80	; 128

00000eb6 <__addsf3>:
     eb6:	bb 27       	eor	r27, r27
     eb8:	aa 27       	eor	r26, r26
     eba:	0e 94 72 07 	call	0xee4	; 0xee4 <__addsf3x>
     ebe:	0c 94 ec 08 	jmp	0x11d8	; 0x11d8 <__fp_round>
     ec2:	0e 94 de 08 	call	0x11bc	; 0x11bc <__fp_pscA>
     ec6:	38 f0       	brcs	.+14     	; 0xed6 <__addsf3+0x20>
     ec8:	0e 94 e5 08 	call	0x11ca	; 0x11ca <__fp_pscB>
     ecc:	20 f0       	brcs	.+8      	; 0xed6 <__addsf3+0x20>
     ece:	39 f4       	brne	.+14     	; 0xede <__addsf3+0x28>
     ed0:	9f 3f       	cpi	r25, 0xFF	; 255
     ed2:	19 f4       	brne	.+6      	; 0xeda <__addsf3+0x24>
     ed4:	26 f4       	brtc	.+8      	; 0xede <__addsf3+0x28>
     ed6:	0c 94 db 08 	jmp	0x11b6	; 0x11b6 <__fp_nan>
     eda:	0e f4       	brtc	.+2      	; 0xede <__addsf3+0x28>
     edc:	e0 95       	com	r30
     ede:	e7 fb       	bst	r30, 7
     ee0:	0c 94 d5 08 	jmp	0x11aa	; 0x11aa <__fp_inf>

00000ee4 <__addsf3x>:
     ee4:	e9 2f       	mov	r30, r25
     ee6:	0e 94 fd 08 	call	0x11fa	; 0x11fa <__fp_split3>
     eea:	58 f3       	brcs	.-42     	; 0xec2 <__addsf3+0xc>
     eec:	ba 17       	cp	r27, r26
     eee:	62 07       	cpc	r22, r18
     ef0:	73 07       	cpc	r23, r19
     ef2:	84 07       	cpc	r24, r20
     ef4:	95 07       	cpc	r25, r21
     ef6:	20 f0       	brcs	.+8      	; 0xf00 <__addsf3x+0x1c>
     ef8:	79 f4       	brne	.+30     	; 0xf18 <__addsf3x+0x34>
     efa:	a6 f5       	brtc	.+104    	; 0xf64 <__addsf3x+0x80>
     efc:	0c 94 1f 09 	jmp	0x123e	; 0x123e <__fp_zero>
     f00:	0e f4       	brtc	.+2      	; 0xf04 <__addsf3x+0x20>
     f02:	e0 95       	com	r30
     f04:	0b 2e       	mov	r0, r27
     f06:	ba 2f       	mov	r27, r26
     f08:	a0 2d       	mov	r26, r0
     f0a:	0b 01       	movw	r0, r22
     f0c:	b9 01       	movw	r22, r18
     f0e:	90 01       	movw	r18, r0
     f10:	0c 01       	movw	r0, r24
     f12:	ca 01       	movw	r24, r20
     f14:	a0 01       	movw	r20, r0
     f16:	11 24       	eor	r1, r1
     f18:	ff 27       	eor	r31, r31
     f1a:	59 1b       	sub	r21, r25
     f1c:	99 f0       	breq	.+38     	; 0xf44 <__addsf3x+0x60>
     f1e:	59 3f       	cpi	r21, 0xF9	; 249
     f20:	50 f4       	brcc	.+20     	; 0xf36 <__addsf3x+0x52>
     f22:	50 3e       	cpi	r21, 0xE0	; 224
     f24:	68 f1       	brcs	.+90     	; 0xf80 <__addsf3x+0x9c>
     f26:	1a 16       	cp	r1, r26
     f28:	f0 40       	sbci	r31, 0x00	; 0
     f2a:	a2 2f       	mov	r26, r18
     f2c:	23 2f       	mov	r18, r19
     f2e:	34 2f       	mov	r19, r20
     f30:	44 27       	eor	r20, r20
     f32:	58 5f       	subi	r21, 0xF8	; 248
     f34:	f3 cf       	rjmp	.-26     	; 0xf1c <__addsf3x+0x38>
     f36:	46 95       	lsr	r20
     f38:	37 95       	ror	r19
     f3a:	27 95       	ror	r18
     f3c:	a7 95       	ror	r26
     f3e:	f0 40       	sbci	r31, 0x00	; 0
     f40:	53 95       	inc	r21
     f42:	c9 f7       	brne	.-14     	; 0xf36 <__addsf3x+0x52>
     f44:	7e f4       	brtc	.+30     	; 0xf64 <__addsf3x+0x80>
     f46:	1f 16       	cp	r1, r31
     f48:	ba 0b       	sbc	r27, r26
     f4a:	62 0b       	sbc	r22, r18
     f4c:	73 0b       	sbc	r23, r19
     f4e:	84 0b       	sbc	r24, r20
     f50:	ba f0       	brmi	.+46     	; 0xf80 <__addsf3x+0x9c>
     f52:	91 50       	subi	r25, 0x01	; 1
     f54:	a1 f0       	breq	.+40     	; 0xf7e <__addsf3x+0x9a>
     f56:	ff 0f       	add	r31, r31
     f58:	bb 1f       	adc	r27, r27
     f5a:	66 1f       	adc	r22, r22
     f5c:	77 1f       	adc	r23, r23
     f5e:	88 1f       	adc	r24, r24
     f60:	c2 f7       	brpl	.-16     	; 0xf52 <__addsf3x+0x6e>
     f62:	0e c0       	rjmp	.+28     	; 0xf80 <__addsf3x+0x9c>
     f64:	ba 0f       	add	r27, r26
     f66:	62 1f       	adc	r22, r18
     f68:	73 1f       	adc	r23, r19
     f6a:	84 1f       	adc	r24, r20
     f6c:	48 f4       	brcc	.+18     	; 0xf80 <__addsf3x+0x9c>
     f6e:	87 95       	ror	r24
     f70:	77 95       	ror	r23
     f72:	67 95       	ror	r22
     f74:	b7 95       	ror	r27
     f76:	f7 95       	ror	r31
     f78:	9e 3f       	cpi	r25, 0xFE	; 254
     f7a:	08 f0       	brcs	.+2      	; 0xf7e <__addsf3x+0x9a>
     f7c:	b0 cf       	rjmp	.-160    	; 0xede <__addsf3+0x28>
     f7e:	93 95       	inc	r25
     f80:	88 0f       	add	r24, r24
     f82:	08 f0       	brcs	.+2      	; 0xf86 <__addsf3x+0xa2>
     f84:	99 27       	eor	r25, r25
     f86:	ee 0f       	add	r30, r30
     f88:	97 95       	ror	r25
     f8a:	87 95       	ror	r24
     f8c:	08 95       	ret

00000f8e <__cmpsf2>:
     f8e:	0e 94 b1 08 	call	0x1162	; 0x1162 <__fp_cmp>
     f92:	08 f4       	brcc	.+2      	; 0xf96 <__cmpsf2+0x8>
     f94:	81 e0       	ldi	r24, 0x01	; 1
     f96:	08 95       	ret

00000f98 <__divsf3>:
     f98:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <__divsf3x>
     f9c:	0c 94 ec 08 	jmp	0x11d8	; 0x11d8 <__fp_round>
     fa0:	0e 94 e5 08 	call	0x11ca	; 0x11ca <__fp_pscB>
     fa4:	58 f0       	brcs	.+22     	; 0xfbc <__divsf3+0x24>
     fa6:	0e 94 de 08 	call	0x11bc	; 0x11bc <__fp_pscA>
     faa:	40 f0       	brcs	.+16     	; 0xfbc <__divsf3+0x24>
     fac:	29 f4       	brne	.+10     	; 0xfb8 <__divsf3+0x20>
     fae:	5f 3f       	cpi	r21, 0xFF	; 255
     fb0:	29 f0       	breq	.+10     	; 0xfbc <__divsf3+0x24>
     fb2:	0c 94 d5 08 	jmp	0x11aa	; 0x11aa <__fp_inf>
     fb6:	51 11       	cpse	r21, r1
     fb8:	0c 94 20 09 	jmp	0x1240	; 0x1240 <__fp_szero>
     fbc:	0c 94 db 08 	jmp	0x11b6	; 0x11b6 <__fp_nan>

00000fc0 <__divsf3x>:
     fc0:	0e 94 fd 08 	call	0x11fa	; 0x11fa <__fp_split3>
     fc4:	68 f3       	brcs	.-38     	; 0xfa0 <__divsf3+0x8>

00000fc6 <__divsf3_pse>:
     fc6:	99 23       	and	r25, r25
     fc8:	b1 f3       	breq	.-20     	; 0xfb6 <__divsf3+0x1e>
     fca:	55 23       	and	r21, r21
     fcc:	91 f3       	breq	.-28     	; 0xfb2 <__divsf3+0x1a>
     fce:	95 1b       	sub	r25, r21
     fd0:	55 0b       	sbc	r21, r21
     fd2:	bb 27       	eor	r27, r27
     fd4:	aa 27       	eor	r26, r26
     fd6:	62 17       	cp	r22, r18
     fd8:	73 07       	cpc	r23, r19
     fda:	84 07       	cpc	r24, r20
     fdc:	38 f0       	brcs	.+14     	; 0xfec <__divsf3_pse+0x26>
     fde:	9f 5f       	subi	r25, 0xFF	; 255
     fe0:	5f 4f       	sbci	r21, 0xFF	; 255
     fe2:	22 0f       	add	r18, r18
     fe4:	33 1f       	adc	r19, r19
     fe6:	44 1f       	adc	r20, r20
     fe8:	aa 1f       	adc	r26, r26
     fea:	a9 f3       	breq	.-22     	; 0xfd6 <__divsf3_pse+0x10>
     fec:	35 d0       	rcall	.+106    	; 0x1058 <__divsf3_pse+0x92>
     fee:	0e 2e       	mov	r0, r30
     ff0:	3a f0       	brmi	.+14     	; 0x1000 <__divsf3_pse+0x3a>
     ff2:	e0 e8       	ldi	r30, 0x80	; 128
     ff4:	32 d0       	rcall	.+100    	; 0x105a <__divsf3_pse+0x94>
     ff6:	91 50       	subi	r25, 0x01	; 1
     ff8:	50 40       	sbci	r21, 0x00	; 0
     ffa:	e6 95       	lsr	r30
     ffc:	00 1c       	adc	r0, r0
     ffe:	ca f7       	brpl	.-14     	; 0xff2 <__divsf3_pse+0x2c>
    1000:	2b d0       	rcall	.+86     	; 0x1058 <__divsf3_pse+0x92>
    1002:	fe 2f       	mov	r31, r30
    1004:	29 d0       	rcall	.+82     	; 0x1058 <__divsf3_pse+0x92>
    1006:	66 0f       	add	r22, r22
    1008:	77 1f       	adc	r23, r23
    100a:	88 1f       	adc	r24, r24
    100c:	bb 1f       	adc	r27, r27
    100e:	26 17       	cp	r18, r22
    1010:	37 07       	cpc	r19, r23
    1012:	48 07       	cpc	r20, r24
    1014:	ab 07       	cpc	r26, r27
    1016:	b0 e8       	ldi	r27, 0x80	; 128
    1018:	09 f0       	breq	.+2      	; 0x101c <__divsf3_pse+0x56>
    101a:	bb 0b       	sbc	r27, r27
    101c:	80 2d       	mov	r24, r0
    101e:	bf 01       	movw	r22, r30
    1020:	ff 27       	eor	r31, r31
    1022:	93 58       	subi	r25, 0x83	; 131
    1024:	5f 4f       	sbci	r21, 0xFF	; 255
    1026:	3a f0       	brmi	.+14     	; 0x1036 <__divsf3_pse+0x70>
    1028:	9e 3f       	cpi	r25, 0xFE	; 254
    102a:	51 05       	cpc	r21, r1
    102c:	78 f0       	brcs	.+30     	; 0x104c <__divsf3_pse+0x86>
    102e:	0c 94 d5 08 	jmp	0x11aa	; 0x11aa <__fp_inf>
    1032:	0c 94 20 09 	jmp	0x1240	; 0x1240 <__fp_szero>
    1036:	5f 3f       	cpi	r21, 0xFF	; 255
    1038:	e4 f3       	brlt	.-8      	; 0x1032 <__divsf3_pse+0x6c>
    103a:	98 3e       	cpi	r25, 0xE8	; 232
    103c:	d4 f3       	brlt	.-12     	; 0x1032 <__divsf3_pse+0x6c>
    103e:	86 95       	lsr	r24
    1040:	77 95       	ror	r23
    1042:	67 95       	ror	r22
    1044:	b7 95       	ror	r27
    1046:	f7 95       	ror	r31
    1048:	9f 5f       	subi	r25, 0xFF	; 255
    104a:	c9 f7       	brne	.-14     	; 0x103e <__divsf3_pse+0x78>
    104c:	88 0f       	add	r24, r24
    104e:	91 1d       	adc	r25, r1
    1050:	96 95       	lsr	r25
    1052:	87 95       	ror	r24
    1054:	97 f9       	bld	r25, 7
    1056:	08 95       	ret
    1058:	e1 e0       	ldi	r30, 0x01	; 1
    105a:	66 0f       	add	r22, r22
    105c:	77 1f       	adc	r23, r23
    105e:	88 1f       	adc	r24, r24
    1060:	bb 1f       	adc	r27, r27
    1062:	62 17       	cp	r22, r18
    1064:	73 07       	cpc	r23, r19
    1066:	84 07       	cpc	r24, r20
    1068:	ba 07       	cpc	r27, r26
    106a:	20 f0       	brcs	.+8      	; 0x1074 <__divsf3_pse+0xae>
    106c:	62 1b       	sub	r22, r18
    106e:	73 0b       	sbc	r23, r19
    1070:	84 0b       	sbc	r24, r20
    1072:	ba 0b       	sbc	r27, r26
    1074:	ee 1f       	adc	r30, r30
    1076:	88 f7       	brcc	.-30     	; 0x105a <__divsf3_pse+0x94>
    1078:	e0 95       	com	r30
    107a:	08 95       	ret

0000107c <__fixsfsi>:
    107c:	0e 94 45 08 	call	0x108a	; 0x108a <__fixunssfsi>
    1080:	68 94       	set
    1082:	b1 11       	cpse	r27, r1
    1084:	0c 94 20 09 	jmp	0x1240	; 0x1240 <__fp_szero>
    1088:	08 95       	ret

0000108a <__fixunssfsi>:
    108a:	0e 94 05 09 	call	0x120a	; 0x120a <__fp_splitA>
    108e:	88 f0       	brcs	.+34     	; 0x10b2 <__fixunssfsi+0x28>
    1090:	9f 57       	subi	r25, 0x7F	; 127
    1092:	98 f0       	brcs	.+38     	; 0x10ba <__fixunssfsi+0x30>
    1094:	b9 2f       	mov	r27, r25
    1096:	99 27       	eor	r25, r25
    1098:	b7 51       	subi	r27, 0x17	; 23
    109a:	b0 f0       	brcs	.+44     	; 0x10c8 <__fixunssfsi+0x3e>
    109c:	e1 f0       	breq	.+56     	; 0x10d6 <__fixunssfsi+0x4c>
    109e:	66 0f       	add	r22, r22
    10a0:	77 1f       	adc	r23, r23
    10a2:	88 1f       	adc	r24, r24
    10a4:	99 1f       	adc	r25, r25
    10a6:	1a f0       	brmi	.+6      	; 0x10ae <__fixunssfsi+0x24>
    10a8:	ba 95       	dec	r27
    10aa:	c9 f7       	brne	.-14     	; 0x109e <__fixunssfsi+0x14>
    10ac:	14 c0       	rjmp	.+40     	; 0x10d6 <__fixunssfsi+0x4c>
    10ae:	b1 30       	cpi	r27, 0x01	; 1
    10b0:	91 f0       	breq	.+36     	; 0x10d6 <__fixunssfsi+0x4c>
    10b2:	0e 94 1f 09 	call	0x123e	; 0x123e <__fp_zero>
    10b6:	b1 e0       	ldi	r27, 0x01	; 1
    10b8:	08 95       	ret
    10ba:	0c 94 1f 09 	jmp	0x123e	; 0x123e <__fp_zero>
    10be:	67 2f       	mov	r22, r23
    10c0:	78 2f       	mov	r23, r24
    10c2:	88 27       	eor	r24, r24
    10c4:	b8 5f       	subi	r27, 0xF8	; 248
    10c6:	39 f0       	breq	.+14     	; 0x10d6 <__fixunssfsi+0x4c>
    10c8:	b9 3f       	cpi	r27, 0xF9	; 249
    10ca:	cc f3       	brlt	.-14     	; 0x10be <__fixunssfsi+0x34>
    10cc:	86 95       	lsr	r24
    10ce:	77 95       	ror	r23
    10d0:	67 95       	ror	r22
    10d2:	b3 95       	inc	r27
    10d4:	d9 f7       	brne	.-10     	; 0x10cc <__fixunssfsi+0x42>
    10d6:	3e f4       	brtc	.+14     	; 0x10e6 <__fixunssfsi+0x5c>
    10d8:	90 95       	com	r25
    10da:	80 95       	com	r24
    10dc:	70 95       	com	r23
    10de:	61 95       	neg	r22
    10e0:	7f 4f       	sbci	r23, 0xFF	; 255
    10e2:	8f 4f       	sbci	r24, 0xFF	; 255
    10e4:	9f 4f       	sbci	r25, 0xFF	; 255
    10e6:	08 95       	ret

000010e8 <__floatunsisf>:
    10e8:	e8 94       	clt
    10ea:	09 c0       	rjmp	.+18     	; 0x10fe <__floatsisf+0x12>

000010ec <__floatsisf>:
    10ec:	97 fb       	bst	r25, 7
    10ee:	3e f4       	brtc	.+14     	; 0x10fe <__floatsisf+0x12>
    10f0:	90 95       	com	r25
    10f2:	80 95       	com	r24
    10f4:	70 95       	com	r23
    10f6:	61 95       	neg	r22
    10f8:	7f 4f       	sbci	r23, 0xFF	; 255
    10fa:	8f 4f       	sbci	r24, 0xFF	; 255
    10fc:	9f 4f       	sbci	r25, 0xFF	; 255
    10fe:	99 23       	and	r25, r25
    1100:	a9 f0       	breq	.+42     	; 0x112c <__floatsisf+0x40>
    1102:	f9 2f       	mov	r31, r25
    1104:	96 e9       	ldi	r25, 0x96	; 150
    1106:	bb 27       	eor	r27, r27
    1108:	93 95       	inc	r25
    110a:	f6 95       	lsr	r31
    110c:	87 95       	ror	r24
    110e:	77 95       	ror	r23
    1110:	67 95       	ror	r22
    1112:	b7 95       	ror	r27
    1114:	f1 11       	cpse	r31, r1
    1116:	f8 cf       	rjmp	.-16     	; 0x1108 <__floatsisf+0x1c>
    1118:	fa f4       	brpl	.+62     	; 0x1158 <__floatsisf+0x6c>
    111a:	bb 0f       	add	r27, r27
    111c:	11 f4       	brne	.+4      	; 0x1122 <__floatsisf+0x36>
    111e:	60 ff       	sbrs	r22, 0
    1120:	1b c0       	rjmp	.+54     	; 0x1158 <__floatsisf+0x6c>
    1122:	6f 5f       	subi	r22, 0xFF	; 255
    1124:	7f 4f       	sbci	r23, 0xFF	; 255
    1126:	8f 4f       	sbci	r24, 0xFF	; 255
    1128:	9f 4f       	sbci	r25, 0xFF	; 255
    112a:	16 c0       	rjmp	.+44     	; 0x1158 <__floatsisf+0x6c>
    112c:	88 23       	and	r24, r24
    112e:	11 f0       	breq	.+4      	; 0x1134 <__floatsisf+0x48>
    1130:	96 e9       	ldi	r25, 0x96	; 150
    1132:	11 c0       	rjmp	.+34     	; 0x1156 <__floatsisf+0x6a>
    1134:	77 23       	and	r23, r23
    1136:	21 f0       	breq	.+8      	; 0x1140 <__floatsisf+0x54>
    1138:	9e e8       	ldi	r25, 0x8E	; 142
    113a:	87 2f       	mov	r24, r23
    113c:	76 2f       	mov	r23, r22
    113e:	05 c0       	rjmp	.+10     	; 0x114a <__floatsisf+0x5e>
    1140:	66 23       	and	r22, r22
    1142:	71 f0       	breq	.+28     	; 0x1160 <__floatsisf+0x74>
    1144:	96 e8       	ldi	r25, 0x86	; 134
    1146:	86 2f       	mov	r24, r22
    1148:	70 e0       	ldi	r23, 0x00	; 0
    114a:	60 e0       	ldi	r22, 0x00	; 0
    114c:	2a f0       	brmi	.+10     	; 0x1158 <__floatsisf+0x6c>
    114e:	9a 95       	dec	r25
    1150:	66 0f       	add	r22, r22
    1152:	77 1f       	adc	r23, r23
    1154:	88 1f       	adc	r24, r24
    1156:	da f7       	brpl	.-10     	; 0x114e <__floatsisf+0x62>
    1158:	88 0f       	add	r24, r24
    115a:	96 95       	lsr	r25
    115c:	87 95       	ror	r24
    115e:	97 f9       	bld	r25, 7
    1160:	08 95       	ret

00001162 <__fp_cmp>:
    1162:	99 0f       	add	r25, r25
    1164:	00 08       	sbc	r0, r0
    1166:	55 0f       	add	r21, r21
    1168:	aa 0b       	sbc	r26, r26
    116a:	e0 e8       	ldi	r30, 0x80	; 128
    116c:	fe ef       	ldi	r31, 0xFE	; 254
    116e:	16 16       	cp	r1, r22
    1170:	17 06       	cpc	r1, r23
    1172:	e8 07       	cpc	r30, r24
    1174:	f9 07       	cpc	r31, r25
    1176:	c0 f0       	brcs	.+48     	; 0x11a8 <__fp_cmp+0x46>
    1178:	12 16       	cp	r1, r18
    117a:	13 06       	cpc	r1, r19
    117c:	e4 07       	cpc	r30, r20
    117e:	f5 07       	cpc	r31, r21
    1180:	98 f0       	brcs	.+38     	; 0x11a8 <__fp_cmp+0x46>
    1182:	62 1b       	sub	r22, r18
    1184:	73 0b       	sbc	r23, r19
    1186:	84 0b       	sbc	r24, r20
    1188:	95 0b       	sbc	r25, r21
    118a:	39 f4       	brne	.+14     	; 0x119a <__fp_cmp+0x38>
    118c:	0a 26       	eor	r0, r26
    118e:	61 f0       	breq	.+24     	; 0x11a8 <__fp_cmp+0x46>
    1190:	23 2b       	or	r18, r19
    1192:	24 2b       	or	r18, r20
    1194:	25 2b       	or	r18, r21
    1196:	21 f4       	brne	.+8      	; 0x11a0 <__fp_cmp+0x3e>
    1198:	08 95       	ret
    119a:	0a 26       	eor	r0, r26
    119c:	09 f4       	brne	.+2      	; 0x11a0 <__fp_cmp+0x3e>
    119e:	a1 40       	sbci	r26, 0x01	; 1
    11a0:	a6 95       	lsr	r26
    11a2:	8f ef       	ldi	r24, 0xFF	; 255
    11a4:	81 1d       	adc	r24, r1
    11a6:	81 1d       	adc	r24, r1
    11a8:	08 95       	ret

000011aa <__fp_inf>:
    11aa:	97 f9       	bld	r25, 7
    11ac:	9f 67       	ori	r25, 0x7F	; 127
    11ae:	80 e8       	ldi	r24, 0x80	; 128
    11b0:	70 e0       	ldi	r23, 0x00	; 0
    11b2:	60 e0       	ldi	r22, 0x00	; 0
    11b4:	08 95       	ret

000011b6 <__fp_nan>:
    11b6:	9f ef       	ldi	r25, 0xFF	; 255
    11b8:	80 ec       	ldi	r24, 0xC0	; 192
    11ba:	08 95       	ret

000011bc <__fp_pscA>:
    11bc:	00 24       	eor	r0, r0
    11be:	0a 94       	dec	r0
    11c0:	16 16       	cp	r1, r22
    11c2:	17 06       	cpc	r1, r23
    11c4:	18 06       	cpc	r1, r24
    11c6:	09 06       	cpc	r0, r25
    11c8:	08 95       	ret

000011ca <__fp_pscB>:
    11ca:	00 24       	eor	r0, r0
    11cc:	0a 94       	dec	r0
    11ce:	12 16       	cp	r1, r18
    11d0:	13 06       	cpc	r1, r19
    11d2:	14 06       	cpc	r1, r20
    11d4:	05 06       	cpc	r0, r21
    11d6:	08 95       	ret

000011d8 <__fp_round>:
    11d8:	09 2e       	mov	r0, r25
    11da:	03 94       	inc	r0
    11dc:	00 0c       	add	r0, r0
    11de:	11 f4       	brne	.+4      	; 0x11e4 <__fp_round+0xc>
    11e0:	88 23       	and	r24, r24
    11e2:	52 f0       	brmi	.+20     	; 0x11f8 <__fp_round+0x20>
    11e4:	bb 0f       	add	r27, r27
    11e6:	40 f4       	brcc	.+16     	; 0x11f8 <__fp_round+0x20>
    11e8:	bf 2b       	or	r27, r31
    11ea:	11 f4       	brne	.+4      	; 0x11f0 <__fp_round+0x18>
    11ec:	60 ff       	sbrs	r22, 0
    11ee:	04 c0       	rjmp	.+8      	; 0x11f8 <__fp_round+0x20>
    11f0:	6f 5f       	subi	r22, 0xFF	; 255
    11f2:	7f 4f       	sbci	r23, 0xFF	; 255
    11f4:	8f 4f       	sbci	r24, 0xFF	; 255
    11f6:	9f 4f       	sbci	r25, 0xFF	; 255
    11f8:	08 95       	ret

000011fa <__fp_split3>:
    11fa:	57 fd       	sbrc	r21, 7
    11fc:	90 58       	subi	r25, 0x80	; 128
    11fe:	44 0f       	add	r20, r20
    1200:	55 1f       	adc	r21, r21
    1202:	59 f0       	breq	.+22     	; 0x121a <__fp_splitA+0x10>
    1204:	5f 3f       	cpi	r21, 0xFF	; 255
    1206:	71 f0       	breq	.+28     	; 0x1224 <__fp_splitA+0x1a>
    1208:	47 95       	ror	r20

0000120a <__fp_splitA>:
    120a:	88 0f       	add	r24, r24
    120c:	97 fb       	bst	r25, 7
    120e:	99 1f       	adc	r25, r25
    1210:	61 f0       	breq	.+24     	; 0x122a <__fp_splitA+0x20>
    1212:	9f 3f       	cpi	r25, 0xFF	; 255
    1214:	79 f0       	breq	.+30     	; 0x1234 <__fp_splitA+0x2a>
    1216:	87 95       	ror	r24
    1218:	08 95       	ret
    121a:	12 16       	cp	r1, r18
    121c:	13 06       	cpc	r1, r19
    121e:	14 06       	cpc	r1, r20
    1220:	55 1f       	adc	r21, r21
    1222:	f2 cf       	rjmp	.-28     	; 0x1208 <__fp_split3+0xe>
    1224:	46 95       	lsr	r20
    1226:	f1 df       	rcall	.-30     	; 0x120a <__fp_splitA>
    1228:	08 c0       	rjmp	.+16     	; 0x123a <__fp_splitA+0x30>
    122a:	16 16       	cp	r1, r22
    122c:	17 06       	cpc	r1, r23
    122e:	18 06       	cpc	r1, r24
    1230:	99 1f       	adc	r25, r25
    1232:	f1 cf       	rjmp	.-30     	; 0x1216 <__fp_splitA+0xc>
    1234:	86 95       	lsr	r24
    1236:	71 05       	cpc	r23, r1
    1238:	61 05       	cpc	r22, r1
    123a:	08 94       	sec
    123c:	08 95       	ret

0000123e <__fp_zero>:
    123e:	e8 94       	clt

00001240 <__fp_szero>:
    1240:	bb 27       	eor	r27, r27
    1242:	66 27       	eor	r22, r22
    1244:	77 27       	eor	r23, r23
    1246:	cb 01       	movw	r24, r22
    1248:	97 f9       	bld	r25, 7
    124a:	08 95       	ret

0000124c <__gesf2>:
    124c:	0e 94 b1 08 	call	0x1162	; 0x1162 <__fp_cmp>
    1250:	08 f4       	brcc	.+2      	; 0x1254 <__gesf2+0x8>
    1252:	8f ef       	ldi	r24, 0xFF	; 255
    1254:	08 95       	ret

00001256 <__mulsf3>:
    1256:	0e 94 3e 09 	call	0x127c	; 0x127c <__mulsf3x>
    125a:	0c 94 ec 08 	jmp	0x11d8	; 0x11d8 <__fp_round>
    125e:	0e 94 de 08 	call	0x11bc	; 0x11bc <__fp_pscA>
    1262:	38 f0       	brcs	.+14     	; 0x1272 <__mulsf3+0x1c>
    1264:	0e 94 e5 08 	call	0x11ca	; 0x11ca <__fp_pscB>
    1268:	20 f0       	brcs	.+8      	; 0x1272 <__mulsf3+0x1c>
    126a:	95 23       	and	r25, r21
    126c:	11 f0       	breq	.+4      	; 0x1272 <__mulsf3+0x1c>
    126e:	0c 94 d5 08 	jmp	0x11aa	; 0x11aa <__fp_inf>
    1272:	0c 94 db 08 	jmp	0x11b6	; 0x11b6 <__fp_nan>
    1276:	11 24       	eor	r1, r1
    1278:	0c 94 20 09 	jmp	0x1240	; 0x1240 <__fp_szero>

0000127c <__mulsf3x>:
    127c:	0e 94 fd 08 	call	0x11fa	; 0x11fa <__fp_split3>
    1280:	70 f3       	brcs	.-36     	; 0x125e <__mulsf3+0x8>

00001282 <__mulsf3_pse>:
    1282:	95 9f       	mul	r25, r21
    1284:	c1 f3       	breq	.-16     	; 0x1276 <__mulsf3+0x20>
    1286:	95 0f       	add	r25, r21
    1288:	50 e0       	ldi	r21, 0x00	; 0
    128a:	55 1f       	adc	r21, r21
    128c:	62 9f       	mul	r22, r18
    128e:	f0 01       	movw	r30, r0
    1290:	72 9f       	mul	r23, r18
    1292:	bb 27       	eor	r27, r27
    1294:	f0 0d       	add	r31, r0
    1296:	b1 1d       	adc	r27, r1
    1298:	63 9f       	mul	r22, r19
    129a:	aa 27       	eor	r26, r26
    129c:	f0 0d       	add	r31, r0
    129e:	b1 1d       	adc	r27, r1
    12a0:	aa 1f       	adc	r26, r26
    12a2:	64 9f       	mul	r22, r20
    12a4:	66 27       	eor	r22, r22
    12a6:	b0 0d       	add	r27, r0
    12a8:	a1 1d       	adc	r26, r1
    12aa:	66 1f       	adc	r22, r22
    12ac:	82 9f       	mul	r24, r18
    12ae:	22 27       	eor	r18, r18
    12b0:	b0 0d       	add	r27, r0
    12b2:	a1 1d       	adc	r26, r1
    12b4:	62 1f       	adc	r22, r18
    12b6:	73 9f       	mul	r23, r19
    12b8:	b0 0d       	add	r27, r0
    12ba:	a1 1d       	adc	r26, r1
    12bc:	62 1f       	adc	r22, r18
    12be:	83 9f       	mul	r24, r19
    12c0:	a0 0d       	add	r26, r0
    12c2:	61 1d       	adc	r22, r1
    12c4:	22 1f       	adc	r18, r18
    12c6:	74 9f       	mul	r23, r20
    12c8:	33 27       	eor	r19, r19
    12ca:	a0 0d       	add	r26, r0
    12cc:	61 1d       	adc	r22, r1
    12ce:	23 1f       	adc	r18, r19
    12d0:	84 9f       	mul	r24, r20
    12d2:	60 0d       	add	r22, r0
    12d4:	21 1d       	adc	r18, r1
    12d6:	82 2f       	mov	r24, r18
    12d8:	76 2f       	mov	r23, r22
    12da:	6a 2f       	mov	r22, r26
    12dc:	11 24       	eor	r1, r1
    12de:	9f 57       	subi	r25, 0x7F	; 127
    12e0:	50 40       	sbci	r21, 0x00	; 0
    12e2:	9a f0       	brmi	.+38     	; 0x130a <__mulsf3_pse+0x88>
    12e4:	f1 f0       	breq	.+60     	; 0x1322 <__mulsf3_pse+0xa0>
    12e6:	88 23       	and	r24, r24
    12e8:	4a f0       	brmi	.+18     	; 0x12fc <__mulsf3_pse+0x7a>
    12ea:	ee 0f       	add	r30, r30
    12ec:	ff 1f       	adc	r31, r31
    12ee:	bb 1f       	adc	r27, r27
    12f0:	66 1f       	adc	r22, r22
    12f2:	77 1f       	adc	r23, r23
    12f4:	88 1f       	adc	r24, r24
    12f6:	91 50       	subi	r25, 0x01	; 1
    12f8:	50 40       	sbci	r21, 0x00	; 0
    12fa:	a9 f7       	brne	.-22     	; 0x12e6 <__mulsf3_pse+0x64>
    12fc:	9e 3f       	cpi	r25, 0xFE	; 254
    12fe:	51 05       	cpc	r21, r1
    1300:	80 f0       	brcs	.+32     	; 0x1322 <__mulsf3_pse+0xa0>
    1302:	0c 94 d5 08 	jmp	0x11aa	; 0x11aa <__fp_inf>
    1306:	0c 94 20 09 	jmp	0x1240	; 0x1240 <__fp_szero>
    130a:	5f 3f       	cpi	r21, 0xFF	; 255
    130c:	e4 f3       	brlt	.-8      	; 0x1306 <__mulsf3_pse+0x84>
    130e:	98 3e       	cpi	r25, 0xE8	; 232
    1310:	d4 f3       	brlt	.-12     	; 0x1306 <__mulsf3_pse+0x84>
    1312:	86 95       	lsr	r24
    1314:	77 95       	ror	r23
    1316:	67 95       	ror	r22
    1318:	b7 95       	ror	r27
    131a:	f7 95       	ror	r31
    131c:	e7 95       	ror	r30
    131e:	9f 5f       	subi	r25, 0xFF	; 255
    1320:	c1 f7       	brne	.-16     	; 0x1312 <__mulsf3_pse+0x90>
    1322:	fe 2b       	or	r31, r30
    1324:	88 0f       	add	r24, r24
    1326:	91 1d       	adc	r25, r1
    1328:	96 95       	lsr	r25
    132a:	87 95       	ror	r24
    132c:	97 f9       	bld	r25, 7
    132e:	08 95       	ret

00001330 <atoi>:
    1330:	fc 01       	movw	r30, r24
    1332:	88 27       	eor	r24, r24
    1334:	99 27       	eor	r25, r25
    1336:	e8 94       	clt
    1338:	21 91       	ld	r18, Z+
    133a:	20 32       	cpi	r18, 0x20	; 32
    133c:	e9 f3       	breq	.-6      	; 0x1338 <atoi+0x8>
    133e:	29 30       	cpi	r18, 0x09	; 9
    1340:	10 f0       	brcs	.+4      	; 0x1346 <atoi+0x16>
    1342:	2e 30       	cpi	r18, 0x0E	; 14
    1344:	c8 f3       	brcs	.-14     	; 0x1338 <atoi+0x8>
    1346:	2b 32       	cpi	r18, 0x2B	; 43
    1348:	41 f0       	breq	.+16     	; 0x135a <atoi+0x2a>
    134a:	2d 32       	cpi	r18, 0x2D	; 45
    134c:	39 f4       	brne	.+14     	; 0x135c <atoi+0x2c>
    134e:	68 94       	set
    1350:	04 c0       	rjmp	.+8      	; 0x135a <atoi+0x2a>
    1352:	0e 94 de 09 	call	0x13bc	; 0x13bc <__mulhi_const_10>
    1356:	82 0f       	add	r24, r18
    1358:	91 1d       	adc	r25, r1
    135a:	21 91       	ld	r18, Z+
    135c:	20 53       	subi	r18, 0x30	; 48
    135e:	2a 30       	cpi	r18, 0x0A	; 10
    1360:	c0 f3       	brcs	.-16     	; 0x1352 <atoi+0x22>
    1362:	1e f4       	brtc	.+6      	; 0x136a <atoi+0x3a>
    1364:	90 95       	com	r25
    1366:	81 95       	neg	r24
    1368:	9f 4f       	sbci	r25, 0xFF	; 255
    136a:	08 95       	ret

0000136c <strcat>:
    136c:	fb 01       	movw	r30, r22
    136e:	dc 01       	movw	r26, r24
    1370:	0d 90       	ld	r0, X+
    1372:	00 20       	and	r0, r0
    1374:	e9 f7       	brne	.-6      	; 0x1370 <strcat+0x4>
    1376:	11 97       	sbiw	r26, 0x01	; 1
    1378:	01 90       	ld	r0, Z+
    137a:	0d 92       	st	X+, r0
    137c:	00 20       	and	r0, r0
    137e:	e1 f7       	brne	.-8      	; 0x1378 <strcat+0xc>
    1380:	08 95       	ret

00001382 <strcpy>:
    1382:	fb 01       	movw	r30, r22
    1384:	dc 01       	movw	r26, r24
    1386:	01 90       	ld	r0, Z+
    1388:	0d 92       	st	X+, r0
    138a:	00 20       	and	r0, r0
    138c:	e1 f7       	brne	.-8      	; 0x1386 <strcpy+0x4>
    138e:	08 95       	ret

00001390 <itoa>:
    1390:	45 32       	cpi	r20, 0x25	; 37
    1392:	51 05       	cpc	r21, r1
    1394:	20 f4       	brcc	.+8      	; 0x139e <itoa+0xe>
    1396:	42 30       	cpi	r20, 0x02	; 2
    1398:	10 f0       	brcs	.+4      	; 0x139e <itoa+0xe>
    139a:	0c 94 d3 09 	jmp	0x13a6	; 0x13a6 <__itoa_ncheck>
    139e:	fb 01       	movw	r30, r22
    13a0:	10 82       	st	Z, r1
    13a2:	cb 01       	movw	r24, r22
    13a4:	08 95       	ret

000013a6 <__itoa_ncheck>:
    13a6:	bb 27       	eor	r27, r27
    13a8:	4a 30       	cpi	r20, 0x0A	; 10
    13aa:	31 f4       	brne	.+12     	; 0x13b8 <__itoa_ncheck+0x12>
    13ac:	99 23       	and	r25, r25
    13ae:	22 f4       	brpl	.+8      	; 0x13b8 <__itoa_ncheck+0x12>
    13b0:	bd e2       	ldi	r27, 0x2D	; 45
    13b2:	90 95       	com	r25
    13b4:	81 95       	neg	r24
    13b6:	9f 4f       	sbci	r25, 0xFF	; 255
    13b8:	0c 94 e7 09 	jmp	0x13ce	; 0x13ce <__utoa_common>

000013bc <__mulhi_const_10>:
    13bc:	7a e0       	ldi	r23, 0x0A	; 10
    13be:	97 9f       	mul	r25, r23
    13c0:	90 2d       	mov	r25, r0
    13c2:	87 9f       	mul	r24, r23
    13c4:	80 2d       	mov	r24, r0
    13c6:	91 0d       	add	r25, r1
    13c8:	11 24       	eor	r1, r1
    13ca:	08 95       	ret

000013cc <__utoa_ncheck>:
    13cc:	bb 27       	eor	r27, r27

000013ce <__utoa_common>:
    13ce:	fb 01       	movw	r30, r22
    13d0:	55 27       	eor	r21, r21
    13d2:	aa 27       	eor	r26, r26
    13d4:	88 0f       	add	r24, r24
    13d6:	99 1f       	adc	r25, r25
    13d8:	aa 1f       	adc	r26, r26
    13da:	a4 17       	cp	r26, r20
    13dc:	10 f0       	brcs	.+4      	; 0x13e2 <__utoa_common+0x14>
    13de:	a4 1b       	sub	r26, r20
    13e0:	83 95       	inc	r24
    13e2:	50 51       	subi	r21, 0x10	; 16
    13e4:	b9 f7       	brne	.-18     	; 0x13d4 <__utoa_common+0x6>
    13e6:	a0 5d       	subi	r26, 0xD0	; 208
    13e8:	aa 33       	cpi	r26, 0x3A	; 58
    13ea:	08 f0       	brcs	.+2      	; 0x13ee <__utoa_common+0x20>
    13ec:	a9 5d       	subi	r26, 0xD9	; 217
    13ee:	a1 93       	st	Z+, r26
    13f0:	00 97       	sbiw	r24, 0x00	; 0
    13f2:	79 f7       	brne	.-34     	; 0x13d2 <__utoa_common+0x4>
    13f4:	b1 11       	cpse	r27, r1
    13f6:	b1 93       	st	Z+, r27
    13f8:	11 92       	st	Z+, r1
    13fa:	cb 01       	movw	r24, r22
    13fc:	0c 94 00 0a 	jmp	0x1400	; 0x1400 <strrev>

00001400 <strrev>:
    1400:	dc 01       	movw	r26, r24
    1402:	fc 01       	movw	r30, r24
    1404:	67 2f       	mov	r22, r23
    1406:	71 91       	ld	r23, Z+
    1408:	77 23       	and	r23, r23
    140a:	e1 f7       	brne	.-8      	; 0x1404 <strrev+0x4>
    140c:	32 97       	sbiw	r30, 0x02	; 2
    140e:	04 c0       	rjmp	.+8      	; 0x1418 <strrev+0x18>
    1410:	7c 91       	ld	r23, X
    1412:	6d 93       	st	X+, r22
    1414:	70 83       	st	Z, r23
    1416:	62 91       	ld	r22, -Z
    1418:	ae 17       	cp	r26, r30
    141a:	bf 07       	cpc	r27, r31
    141c:	c8 f3       	brcs	.-14     	; 0x1410 <strrev+0x10>
    141e:	08 95       	ret

00001420 <_exit>:
    1420:	f8 94       	cli

00001422 <__stop_program>:
    1422:	ff cf       	rjmp	.-2      	; 0x1422 <__stop_program>
